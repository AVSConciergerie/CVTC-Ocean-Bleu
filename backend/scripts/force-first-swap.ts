import { ethers } from 'ethers';
import dotenv from 'dotenv';
dotenv.config();

const BNB_RPC_URL = process.env.BNB_RPC_URL;
const OPERATOR_PRIVATE_KEY = process.env.OPERATOR_PRIVATE_KEY;
const CVTC_ONBOARDING_CONTRACT_ADDRESS = process.env.CVTC_ONBOARDING_CONTRACT_ADDRESS;

const contractABI = [
  "function updateWhitelist(address user, bool status) external",
  "function buy(uint256 minCvtcOut) external payable",
  "function getReserves() external view returns (uint256, uint256)",
  "function cvtcToken() external view returns (address)"
];

async function forceFirstSwap() {
  console.log("üöÄ FOR√áAGE PREMIER SWAP");
  console.log("=======================");

  const USER_ADDRESS = "0x04554bd13ddaa139d7d84953841562ca8eb55d1b";

  if (!OPERATOR_PRIVATE_KEY) {
    console.log("‚ùå OPERATOR_PRIVATE_KEY non configur√©e");
    return;
  }

  const provider = new ethers.JsonRpcProvider(BNB_RPC_URL);
  const operatorWallet = new ethers.Wallet(OPERATOR_PRIVATE_KEY, provider);
  const onboardingContract = new ethers.Contract(CVTC_ONBOARDING_CONTRACT_ADDRESS, contractABI, operatorWallet);

  console.log(`üë§ Utilisateur: ${USER_ADDRESS}`);
  console.log(`üìç Contrat: ${CVTC_ONBOARDING_CONTRACT_ADDRESS}`);
  console.log(`üëë Op√©rateur: ${operatorWallet.address}`);

  try {
    // V√©rifier le solde de l'op√©rateur
    const operatorBalance = await provider.getBalance(operatorWallet.address);
    console.log(`\\nüí∞ Solde op√©rateur: ${ethers.formatEther(operatorBalance)} BNB`);

    // V√©rifier les r√©serves du contrat
    const [bnbReserve, cvtcReserve] = await onboardingContract.getReserves();
    console.log(`üí∞ R√©serves BNB: ${ethers.formatEther(bnbReserve)} BNB`);
    console.log(`ü™ô R√©serves CVTC: ${ethers.formatUnits(cvtcReserve, 2)} CVTC`);

    // V√©rifier si l'utilisateur est whitelisted
    console.log(`\\nüîç V√âRIFICATION WHITELIST...`);
    // Note: On ne peut pas lire directement la whitelist, on va essayer le swap

    if (operatorBalance < ethers.parseEther("0.001")) {
      console.log(`‚ùå SOLDE INSUFFISANT: ${ethers.formatEther(operatorBalance)} BNB`);
      console.log(`Minimum requis: 0.001 BNB`);
      return;
    }

    if (bnbReserve === 0n || cvtcReserve === 0n) {
      console.log(`‚ùå R√âSERVES INSUFFISANTES`);
      console.log(`BNB: ${ethers.formatEther(bnbReserve)} BNB`);
      console.log(`CVTC: ${ethers.formatUnits(cvtcReserve, 2)} CVTC`);
      return;
    }

    console.log(`\\n‚úÖ CONDITIONS REMPLIES`);
    console.log(`üîÑ Ex√©cution du premier swap forc√©...`);

    // Calculer le montant minimum attendu
    const bnbAmount = ethers.parseEther("0.00002");
    const minCvtcOut = 1000; // Minimum 10 CVTC

    console.log(`üí∏ Swap: ${ethers.formatEther(bnbAmount)} BNB`);
    console.log(`üéØ Minimum CVTC: ${minCvtcOut / 100} CVTC`);

    // Ex√©cuter le swap
    const tx = await onboardingContract.buy(minCvtcOut, {
      value: bnbAmount,
      gasLimit: 300000
    });

    console.log(`üì§ Transaction envoy√©e: ${tx.hash}`);
    console.log(`‚è≥ En attente de confirmation...`);

    const receipt = await tx.wait();
    console.log(`‚úÖ Transaction confirm√©e!`);
    console.log(`üìä Gas utilis√©: ${receipt.gasUsed}`);

    // V√©rifier le solde de l'utilisateur apr√®s le swap
    const cvtcTokenAddress = await onboardingContract.cvtcToken();
    const cvtcToken = new ethers.Contract(
      cvtcTokenAddress,
      ["function balanceOf(address) view returns (uint256)"],
      provider
    );

    const newBalance = await cvtcToken.balanceOf(USER_ADDRESS);
    console.log(`\\nüí∞ NOUVEAU SOLDE UTILISATEUR:`);
    console.log(`ü™ô CVTC: ${ethers.formatUnits(newBalance, 2)} CVTC`);

    const expectedBalance = ethers.parseUnits("2500000000", 2);
    console.log(`\\nüéØ SOLDE ATTENDU:`);
    console.log(`üìä Selon calcul: ${ethers.formatUnits(expectedBalance, 2)} CVTC`);

    if (newBalance >= expectedBalance) {
      console.log(`\\nüéâ SUCC√àS!`);
      console.log(`Le premier swap a √©t√© ex√©cut√© correctement`);
      console.log(`L'utilisateur a maintenant ${ethers.formatUnits(newBalance, 2)} CVTC`);
    } else {
      console.log(`\\n‚ö†Ô∏è MONTANT INF√âRIEUR ATTENDU`);
      console.log(`Re√ßu: ${ethers.formatUnits(newBalance, 2)} CVTC`);
      console.log(`Attendu: ${ethers.formatUnits(expectedBalance, 2)} CVTC`);
    }

  } catch (error) {
    console.log(`\\n‚ùå ERREUR:`);
    console.error(error.message);

    if (error.message.includes("not authorised")) {
      console.log(`\\nüí° L'utilisateur n'est pas whitelisted`);
      console.log(`Il faut d'abord whitelister l'utilisateur`);
    } else if (error.message.includes("insufficient funds")) {
      console.log(`\\nüí° Solde op√©rateur insuffisant`);
      console.log(`Il faut ajouter des BNB √† l'op√©rateur`);
    }
  }
}

forceFirstSwap().catch(console.error);