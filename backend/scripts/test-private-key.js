import { ethers } from 'ethers';
import dotenv from 'dotenv';

// Charger les variables d'environnement
dotenv.config();

const privateKey = process.env.OPERATOR_PRIVATE_KEY;

console.log('üîê TEST DE VALIDIT√â DE LA CL√â PRIV√âE');
console.log('====================================');

try {
    console.log('Cl√© priv√©e (masqu√©e):', privateKey ? privateKey.substring(0, 10) + '...' : 'NON D√âFINIE');

    if (!privateKey) {
        console.log('‚ùå OPERATOR_PRIVATE_KEY non d√©finie dans .env');
        process.exit(1);
    }

    // Tester la cr√©ation du wallet
    const wallet = new ethers.Wallet(privateKey);
    console.log('‚úÖ Cl√© priv√©e valide!');
    console.log('üìç Adresse publique:', wallet.address);

    // Tester la connexion au r√©seau
    const provider = new ethers.JsonRpcProvider(process.env.BNB_RPC_URL);
    const connectedWallet = wallet.connect(provider);
    console.log('‚úÖ Connexion au r√©seau r√©ussie');

    // V√©rifier le solde
    const balance = await provider.getBalance(wallet.address);
    console.log('üí∞ Solde BNB:', ethers.formatEther(balance));

} catch (error) {
    console.log('‚ùå Cl√© priv√©e invalide:', error.message);
    console.log('');
    console.log('üí° Solutions:');
    console.log('1. V√©rifiez que la cl√© priv√©e commence par 0x');
    console.log('2. Assurez-vous qu\'elle fait exactement 66 caract√®res (0x + 64 caract√®res hex)');
    console.log('3. V√©rifiez qu\'elle ne contient que des caract√®res hexad√©cimaux valides (0-9, a-f)');
    process.exit(1);
}