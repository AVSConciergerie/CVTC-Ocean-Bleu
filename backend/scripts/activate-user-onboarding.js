import { ethers } from 'ethers';
import dotenv from 'dotenv';

// Charger les variables d'environnement
dotenv.config();

const {
    BNB_RPC_URL,
    OPERATOR_PRIVATE_KEY
} = process.env;

// Adresse du contrat onboarding
const ONBOARDING_CONTRACT_ADDRESS = "0xf3af730B6eaF257EC44b244d56F3073Fd6B593c5";

// Adresse de l'utilisateur
const USER_ADDRESS = "0x04554bd13ddaa139d7d84953841562ca8eb55d1b";

async function activateUserOnboarding() {
    console.log('üéØ ACTIVATION UTILISATEUR DANS ONBOARDING');
    console.log('======================================');

    try {
        const provider = new ethers.JsonRpcProvider(BNB_RPC_URL);
        const operatorWallet = new ethers.Wallet(OPERATOR_PRIVATE_KEY, provider);

        console.log(`üë§ Utilisateur: ${USER_ADDRESS}`);
        console.log(`üëë Op√©rateur: ${operatorWallet.address}`);
        console.log(`üìç Contrat: ${ONBOARDING_CONTRACT_ADDRESS}`);
        console.log('');

        // V√©rifier le solde de l'op√©rateur
        const balance = await provider.getBalance(operatorWallet.address);
        console.log(`üí∞ Solde op√©rateur: ${ethers.formatEther(balance)} BNB`);

        // V√©rifier le solde du contrat
        const contractBalance = await provider.getBalance(ONBOARDING_CONTRACT_ADDRESS);
        console.log(`üí∞ Solde contrat: ${ethers.formatEther(contractBalance)} BNB`);

        // Cr√©er un wallet temporaire pour l'utilisateur
        const userWallet = ethers.Wallet.createRandom().connect(provider);

        // Alimenter le wallet temporaire avec 0.01 BNB (co√ªt estim√© de la transaction)
        console.log('üí∏ Alimentation du wallet utilisateur...');
        const fundTx = await operatorWallet.sendTransaction({
            to: userWallet.address,
            value: ethers.parseEther("0.01")
        });
        await fundTx.wait();
        console.log(`‚úÖ Wallet aliment√©: ${fundTx.hash}`);
        console.log('');

        // ABI pour acceptOnboardingTerms
        const onboardingABI = [
            "function acceptOnboardingTerms() external",
            "function getUserOnboardingStatus(address user) external view returns (bool,bool,uint256,uint256,uint8,uint256)"
        ];

        // Contrat connect√© avec le wallet de l'utilisateur
        const contract = new ethers.Contract(ONBOARDING_CONTRACT_ADDRESS, onboardingABI, userWallet);

        console.log('üìù Appel de acceptOnboardingTerms()...');

        // Appeler acceptOnboardingTerms
        const tx = await contract.acceptOnboardingTerms({
            gasLimit: 500000
        });

        console.log(`üì§ Transaction envoy√©e: ${tx.hash}`);

        const receipt = await tx.wait();
        console.log('‚úÖ Transaction confirm√©e!');
        console.log(`üìä Gas utilis√©: ${receipt.gasUsed}`);
        console.log('');

        // V√©rifier le nouveau statut
        console.log('üîç V√©rification du statut apr√®s activation...');
        const statusContract = new ethers.Contract(ONBOARDING_CONTRACT_ADDRESS, onboardingABI, provider);
        const status = await statusContract.getUserOnboardingStatus(USER_ADDRESS);
        const [isActive, completed, daysRemaining, cvtcAccumulated, currentPalier, totalRepaid] = status;

        console.log('üìä NOUVEAU STATUT:');
        console.log(`   Actif: ${isActive}`);
        console.log(`   Termin√©: ${completed}`);
        console.log(`   Jours restants: ${daysRemaining}`);
        console.log(`   CVTC accumul√©s: ${ethers.formatEther(cvtcAccumulated)} CVTC`);
        console.log(`   Palier actuel: ${currentPalier}`);
        console.log('');

        if (isActive) {
            console.log('üéâ SUCC√àS! L\'utilisateur est maintenant actif!');
            console.log('‚úÖ Les swaps quotidiens peuvent maintenant √™tre ex√©cut√©s');
            console.log('');
            console.log('üîó TRANSACTION D\'ACTIVATION:');
            console.log(`https://testnet.bscscan.com/tx/${tx.hash}`);
        } else {
            console.log('‚ùå √âCHEC: L\'utilisateur n\'a pas √©t√© activ√©');
            console.log('üí° V√©rifier les logs de la transaction pour plus de d√©tails');
        }

    } catch (error) {
        console.error('‚ùå Erreur lors de l\'activation:', error.message);

        if (error.message.includes("Already active")) {
            console.log('‚ÑπÔ∏è L\'utilisateur est d√©j√† actif');
        } else if (error.message.includes("Already completed")) {
            console.log('‚ÑπÔ∏è L\'onboarding est d√©j√† termin√©');
        } else if (error.message.includes("insufficient funds")) {
            console.log('üí∞ Fonds insuffisants pour la transaction');
        }
    }
}

// Ex√©cuter l'activation
activateUserOnboarding().catch(console.error);