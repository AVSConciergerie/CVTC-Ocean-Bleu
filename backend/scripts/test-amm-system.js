import { ethers } from 'ethers';
import dotenv from 'dotenv';

// Charger les variables d'environnement
dotenv.config();

const {
    BNB_RPC_URL,
    OPERATOR_PRIVATE_KEY
} = process.env;

// Adresses des contrats
const SWAP_CONTRACT_ADDRESS = "0x9fD15619a90005468F02920Bb569c95759Da710C";
const CVTC_TOKEN_ADDRESS = "0x532FC49071656C16311F2f89E6e41C53243355D3";

// Adresse de l'utilisateur
const USER_ADDRESS = "0x04554bd13ddaa139d7d84953841562ca8eb55d1b";

// ABI pour le contrat swap
const swapABI = [
    "function addLiquidity(uint256 cvtcAmount) external payable",
    "function addLiquidityPublic(uint256 cvtcAmount) external payable",
    "function buyForUser(address user, uint256 minCvtcOut) external payable",
    "function getReserves() external view returns (uint256, uint256)",
    "function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) external pure returns (uint256)"
];

// ABI pour le token CVTC
const cvtcABI = [
    "function approve(address spender, uint256 amount) external returns (bool)",
    "function balanceOf(address account) external view returns (uint256)"
];

async function testAMMSystem() {
    console.log('üß™ TEST DU SYST√àME AMM CORRIG√â');
    console.log('==============================');

    try {
        const provider = new ethers.JsonRpcProvider(BNB_RPC_URL);
        const operatorWallet = new ethers.Wallet(OPERATOR_PRIVATE_KEY, provider);

        console.log(`üë§ Utilisateur: ${USER_ADDRESS}`);
        console.log(`üëë Op√©rateur: ${operatorWallet.address}`);
        console.log(`üìç Contrat swap: ${SWAP_CONTRACT_ADDRESS}`);
        console.log('');

        // Cr√©er les instances des contrats
        const swapContract = new ethers.Contract(SWAP_CONTRACT_ADDRESS, swapABI, operatorWallet);
        const cvtcToken = new ethers.Contract(CVTC_TOKEN_ADDRESS, cvtcABI, operatorWallet);

        // V√©rifier les soldes
        const bnbBalance = await provider.getBalance(operatorWallet.address);
        const cvtcBalance = await cvtcToken.balanceOf(operatorWallet.address);

        console.log(`üí∞ Solde BNB: ${ethers.formatEther(bnbBalance)} BNB`);
        console.log(`ü™ô Solde CVTC: ${ethers.formatUnits(cvtcBalance, 2)} CVTC`);
        console.log('');

        // √âtape 1: Ajouter de la liquidit√© (AMM classique)
        console.log('üíß √âTAPE 1: AJOUT DE LIQUIDIT√â AMM');

        const bnbLiquidity = ethers.parseEther("0.0001"); // Tr√®s petite quantit√© pour test
        const cvtcLiquidity = ethers.parseUnits("50000000", 2); // 50 millions CVTC

        console.log(`üì• Ajout de liquidit√©:`);
        console.log(`   BNB: ${ethers.formatEther(bnbLiquidity)} BNB`);
        console.log(`   CVTC: ${ethers.formatUnits(cvtcLiquidity, 2)} CVTC`);
        console.log(`   Ratio: 1 BNB = ${ethers.formatUnits(cvtcLiquidity, 2)} CVTC`);
        console.log('');

        // Approuver les CVTC
        console.log('üîì Approbation des CVTC...');
        const approveTx = await cvtcToken.approve(SWAP_CONTRACT_ADDRESS, cvtcLiquidity);
        console.log(`üì§ Approbation: ${approveTx.hash}`);
        await approveTx.wait();
        console.log('‚úÖ Approbation confirm√©e');
        console.log('');

        // Ajouter la liquidit√©
        console.log('üíß Ajout de liquidit√©...');
        const addLiquidityTx = await swapContract.addLiquidity(cvtcLiquidity, {
            value: bnbLiquidity,
            gasLimit: 500000
        });

        console.log(`üì§ Liquidit√©: ${addLiquidityTx.hash}`);
        await addLiquidityTx.wait();
        console.log('‚úÖ Liquidit√© ajout√©e avec succ√®s!');
        console.log('');

        // V√©rifier les nouvelles r√©serves
        const [bnbReserve, cvtcReserve] = await swapContract.getReserves();
        console.log(`üí∞ R√©serves actuelles:`);
        console.log(`   BNB: ${ethers.formatEther(bnbReserve)} BNB`);
        console.log(`   CVTC: ${ethers.formatUnits(cvtcReserve, 2)} CVTC`);
        console.log('');

        // √âtape 2: Tester un swap AMM
        console.log('üîÑ √âTAPE 2: TEST D\'UN SWAP AMM');

        const swapAmount = ethers.parseEther("0.00002"); // 0.01‚Ç¨ en BNB
        console.log(`üí∏ Montant du swap: ${ethers.formatEther(swapAmount)} BNB`);

        // Calculer le montant attendu
        const expectedOut = await swapContract.getAmountOut(swapAmount, bnbReserve, cvtcReserve);
        const minOut = expectedOut * 95n / 100n; // 5% slippage

        console.log(`üéØ CVTC attendu: ${ethers.formatUnits(expectedOut, 2)} CVTC`);
        console.log(`üéØ Minimum requis: ${ethers.formatUnits(minOut, 2)} CVTC`);
        console.log('');

        // Ex√©cuter le swap AMM
        console.log('üöÄ Ex√©cution du swap AMM...');
        const swapTx = await swapContract.buyForUser(USER_ADDRESS, minOut, {
            value: swapAmount,
            gasLimit: 300000
        });

        console.log(`üì§ Swap: ${swapTx.hash}`);
        const swapReceipt = await swapTx.wait();
        console.log('‚úÖ Swap AMM r√©ussi!');
        console.log(`üìä Gas utilis√©: ${swapReceipt.gasUsed}`);
        console.log('');

        // V√©rifier les r√©serves apr√®s swap
        const [newBnbReserve, newCvtcReserve] = await swapContract.getReserves();
        console.log(`üí∞ R√©serves apr√®s swap:`);
        console.log(`   BNB: ${ethers.formatEther(newBnbReserve)} BNB (+${ethers.formatEther(newBnbReserve - bnbReserve)})`);
        console.log(`   CVTC: ${ethers.formatUnits(newCvtcReserve, 2)} CVTC (-${ethers.formatUnits(cvtcReserve - newCvtcReserve, 2)})`);
        console.log('');

        console.log('üéâ SYST√àME AMM FONCTIONNEL!');
        console.log('===========================');
        console.log('‚úÖ Liquidit√© ajout√©e');
        console.log('‚úÖ Swap AMM ex√©cut√©');
        console.log('‚úÖ R√©serves mises √† jour');
        console.log('‚úÖ Prix maintenu par l\'algorithme AMM');
        console.log('');
        console.log('üöÄ Le syst√®me AMM est maintenant op√©rationnel!');

    } catch (error) {
        console.error('‚ùå Erreur:', error.message);

        if (error.message.includes('Ratio de liquidite incorrect')) {
            console.log('üí° Le ratio de liquidit√© n\'est pas respect√©');
        } else if (error.message.includes('transferFrom')) {
            console.log('üí° Probl√®me d\'approbation des tokens');
        } else if (error.message.includes('Liquidite desactivee')) {
            console.log('üí° La liquidit√© est d√©sactiv√©e');
        }
    }
}

// Ex√©cuter le test AMM
testAMMSystem().catch(console.error);