import { forceExecuteBatch, executeSingleAction, getPendingActionsStatus, addPendingAction, ACTION_TYPES } from '../services/batchActionService.js';

console.log('‚ö° TEST D\'EX√âCUTION FORC√âE DU BATCH');
console.log('==================================');

// Adresse de test
const TEST_USER = "0x04554bd13ddaa139d7d84953841562ca8eb55d1b";

/**
 * Test des fonctionnalit√©s d'ex√©cution forc√©e
 */
async function testForceExecution() {
    try {
        console.log('üìù Test 1: Ajout de quelques actions...');
        await addPendingAction(TEST_USER, ACTION_TYPES.DAILY_SWAP, { reason: 'test_force_1' });
        await addPendingAction(TEST_USER, ACTION_TYPES.P2P_TRANSFER, {
            recipient: '0x1234567890123456789012345678901234567890',
            amount: '50'
        });
        console.log('');

        // V√©rifier le statut
        console.log('üìä Statut actuel:');
        const status = await getPendingActionsStatus(TEST_USER);
        console.log(`   Actions en attente: ${status.pending}`);
        console.log(`   Seuil batch atteint: ${status.canTriggerBatch ? '‚úÖ OUI' : '‚ùå NON'}`);
        console.log('');

        if (status.pending < 3) {
            console.log('üîß Test 2: Ex√©cution forc√©e (ignore le seuil)...');
            const result = await forceExecuteBatch(TEST_USER);
            console.log(`   R√©sultat: ${result.message}`);
            console.log('');
        }

        console.log('üéØ Test 3: Ajout d\'une action et ex√©cution unique...');

        // Ajouter une nouvelle action
        const action = await addPendingAction(TEST_USER, ACTION_TYPES.DAILY_SWAP, { reason: 'single_execution_test' });
        console.log(`   Action ajout√©e avec ID: ${action.id}`);

        // Ex√©cuter seulement cette action
        const singleResult = await executeSingleAction(TEST_USER, action.id);
        console.log(`   R√©sultat ex√©cution unique: ${singleResult.message}`);
        console.log('');

        console.log('üìã Test 4: Statut final...');
        const finalStatus = await getPendingActionsStatus(TEST_USER);
        console.log(`   Actions restantes: ${finalStatus.pending}`);
        console.log(`   Actions termin√©es: ${finalStatus.completed}`);
        console.log(`   Actions √©chou√©es: ${finalStatus.failed}`);
        console.log('');

        console.log('‚úÖ Tests d\'ex√©cution forc√©e termin√©s!');

    } catch (error) {
        console.error('‚ùå Erreur lors des tests:', error);
    }
}

// Ex√©cuter les tests
testForceExecution().catch(console.error);