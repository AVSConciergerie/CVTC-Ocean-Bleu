import { addPendingAction, executeBatch, getPendingActionsStatus, triggerManualBatch, addMissedDailySwaps, forceExecuteBatch, executeSingleAction, ACTION_TYPES } from '../services/batchActionService.js';

console.log('üß™ TEST DU SYST√àME DE BATCHING INTELLIGENT');
console.log('=========================================');

// Adresse de test (√† remplacer par une vraie adresse)
const TEST_USER = "0x04554bd13ddaa139d7d84953841562ca8eb55d1b";

/**
 * Test du syst√®me de batching
 */
async function testBatchSystem() {
    try {
        console.log('üìù Test 1: Ajout d\'actions en attente...');
        console.log('');

        // Ajouter des swaps quotidiens manqu√©s
        console.log('üîÑ Ajout des swaps quotidiens manqu√©s...');
        await addMissedDailySwaps();
        console.log('');

        // Ajouter manuellement quelques actions
        console.log('üìù Ajout d\'actions manuelles...');
        await addPendingAction(TEST_USER, ACTION_TYPES.DAILY_SWAP, { reason: 'test_swap_1' });
        await addPendingAction(TEST_USER, ACTION_TYPES.P2P_TRANSFER, {
            recipient: '0x1234567890123456789012345678901234567890',
            amount: '100'
        });
        await addPendingAction(TEST_USER, ACTION_TYPES.PREMIUM_SUBSCRIPTION, { plan: 'premium_monthly' });
        console.log('');

        // V√©rifier le statut
        console.log('üìä Statut des actions en attente:');
        const status = await getPendingActionsStatus(TEST_USER);
        console.log(`   Total: ${status.total}`);
        console.log(`   En attente: ${status.pending}`);
        console.log(`   Termin√©es: ${status.completed}`);
        console.log(`   √âchou√©es: ${status.failed}`);
        console.log(`   Peut d√©clencher batch: ${status.canTriggerBatch ? '‚úÖ OUI' : '‚ùå NON'}`);
        console.log('');

        // Si on peut d√©clencher le batch, le faire
        if (status.canTriggerBatch) {
            console.log('üöÄ D√©clenchement automatique du batch...');
            await executeBatch(TEST_USER);
        } else {
            console.log('üîß Seuil non atteint, ajout d\'une action suppl√©mentaire...');
            await addPendingAction(TEST_USER, ACTION_TYPES.DAILY_SWAP, { reason: 'test_swap_2' });

            // Rev√©rifier
            const newStatus = await getPendingActionsStatus(TEST_USER);
            console.log(`   Nouvelles actions en attente: ${newStatus.pending}`);
            console.log(`   Peut d√©clencher batch: ${newStatus.canTriggerBatch ? '‚úÖ OUI' : '‚ùå NON'}`);

            if (newStatus.canTriggerBatch) {
                console.log('üöÄ D√©clenchement du batch avec action suppl√©mentaire...');
                await executeBatch(TEST_USER);
            }
        }

        console.log('');
        console.log('‚ö° Test 2: Ex√©cution forc√©e (ignore le seuil)...');
        const forceResult = await forceExecuteBatch(TEST_USER);
        console.log(`   R√©sultat: ${forceResult.message}`);
        console.log('');

        console.log('üéØ Test 3: Ex√©cution d\'une action unique...');
        const singleAction = await addPendingAction(TEST_USER, ACTION_TYPES.DAILY_SWAP, { reason: 'single_test' });
        const singleResult = await executeSingleAction(TEST_USER, singleAction.id);
        console.log(`   R√©sultat: ${singleResult.message}`);
        console.log('');

        console.log('üìã Test 4: D√©clenchement manuel du batch...');
        await triggerManualBatch(TEST_USER);

        console.log('');
        console.log('‚úÖ Tests termin√©s!');

    } catch (error) {
        console.error('‚ùå Erreur lors des tests:', error);
    }
}

// Ex√©cuter les tests
testBatchSystem().catch(console.error);