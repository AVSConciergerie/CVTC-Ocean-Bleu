import fetch from 'node-fetch';
import { ethers } from 'ethers';

const BACKEND_URL = 'http://localhost:4000';
const CVTC_TOKEN_ADDRESS = '0x532FC49071656C16311F2f89E6e41C53243355D3';

/**
 * Test script pour v√©rifier le fallback backend paymaster
 */
async function testPaymasterFallback() {
    console.log('üß™ Test du syst√®me de fallback paymaster backend...\n');

    try {
        // Test 1: V√©rifier le statut du paymaster
        console.log('1Ô∏è‚É£ Test du statut paymaster...');
        const statusResponse = await fetch(`${BACKEND_URL}/api/paymaster/status`);
        const statusData = await statusResponse.json();

        if (statusData.success) {
            console.log('‚úÖ Statut paymaster OK:');
            console.log('   - Paymaster:', statusData.data.paymasterAddress);
            console.log('   - CVTC support√©:', statusData.data.cvtcSupported);
            console.log('   - Test data r√©ussi:', statusData.data.testDataSuccessful);
        } else {
            console.log('‚ùå Erreur statut paymaster:', statusData.error);
            return;
        }

        // Test 2: R√©cup√©rer les donn√©es paymaster
        console.log('\n2Ô∏è‚É£ Test r√©cup√©ration donn√©es paymaster...');
        const dataResponse = await fetch(`${BACKEND_URL}/api/paymaster/data/${CVTC_TOKEN_ADDRESS}`);
        const dataResult = await dataResponse.json();

        if (dataResult.success) {
            console.log('‚úÖ Donn√©es paymaster r√©cup√©r√©es:');
            console.log('   - Longueur:', dataResult.data.paymasterData.length);
            console.log('   - Format hex valide:', dataResult.data.paymasterData.startsWith('0x'));

            // V√©rifier que c'est des bytes valides
            try {
                const bytes = ethers.getBytes(dataResult.data.paymasterData);
                console.log('   - Conversion bytes r√©ussie, longueur:', bytes.length);
            } catch (error) {
                console.log('‚ùå Erreur conversion bytes:', error.message);
            }
        } else {
            console.log('‚ùå Erreur donn√©es paymaster:', dataResult.error);
            return;
        }

        // Test 3: R√©cup√©rer les donn√©es stub
        console.log('\n3Ô∏è‚É£ Test r√©cup√©ration donn√©es stub...');
        const stubResponse = await fetch(`${BACKEND_URL}/api/paymaster/stub/${CVTC_TOKEN_ADDRESS}`);
        const stubResult = await stubResponse.json();

        if (stubResult.success) {
            console.log('‚úÖ Donn√©es stub r√©cup√©r√©es:');
            console.log('   - Longueur:', stubResult.data.paymasterStubData.length);
            console.log('   - Format hex valide:', stubResult.data.paymasterStubData.startsWith('0x'));
        } else {
            console.log('‚ùå Erreur donn√©es stub:', stubResult.error);
            return;
        }

        // Test 4: Calculer une quote
        console.log('\n4Ô∏è‚É£ Test calcul quote (100000 gas)...');
        const quoteResponse = await fetch(`${BACKEND_URL}/api/paymaster/quote/100000/${CVTC_TOKEN_ADDRESS}`);
        const quoteResult = await quoteResponse.json();

        if (quoteResult.success) {
            console.log('‚úÖ Quote calcul√©e:');
            console.log('   - Gas limit:', quoteResult.data.gasLimit);
            console.log('   - Montant tokens:', quoteResult.data.tokenAmount, 'CVTC');
            console.log('   - Quote brute:', quoteResult.data.quote);
        } else {
            console.log('‚ùå Erreur calcul quote:', quoteResult.error);
            return;
        }

        console.log('\nüéâ Tous les tests du fallback backend ont r√©ussi !');
        console.log('üí° Le syst√®me de fallback est op√©rationnel.');

    } catch (error) {
        console.error('‚ùå Erreur lors des tests:', error.message);
        console.log('\nüîß Assurez-vous que:');
        console.log('   - Le serveur backend est d√©marr√© (npm start dans /backend)');
        console.log('   - Le contrat paymaster est d√©ploy√© et accessible');
        console.log('   - La configuration r√©seau est correcte');
    }
}

// Ex√©cuter les tests
testPaymasterFallback();