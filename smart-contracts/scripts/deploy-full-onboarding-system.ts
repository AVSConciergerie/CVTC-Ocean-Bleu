import { ethers } from "hardhat";
import { CVTCOnboarding, CVTCSwap } from "../typechain-types";

async function main() {
  console.log("üöÄ D√©ploiement complet du syst√®me d'onboarding CVTC...");

  // Configuration
  const CVTC_TOKEN_ADDRESS = "0x532FC49071656C16311F2f89E6e41C53243355D3"; // BSC Testnet
  const INITIAL_LIQUIDITY_BNB = ethers.parseEther("10"); // 10 BNB
  const INITIAL_LIQUIDITY_CVTC = ethers.parseEther("10000"); // 10,000 CVTC

  const [deployer] = await ethers.getSigners();
  console.log("D√©ploiement avec le compte:", deployer.address);
  console.log("Solde BNB:", ethers.formatEther(await deployer.provider.getBalance(deployer.address)));

  // === PHASE 1: D√âPLOIEMENT DU POOL DE SWAP ===
  console.log("\nüèä PHASE 1: D√©ploiement du pool de swap invisible");

  const cvtcSwapFactory = await ethers.getContractFactory("CVTCSwap");
  const cvtcSwap = await cvtcSwapFactory.deploy(CVTC_TOKEN_ADDRESS) as CVTCSwap;
  await cvtcSwap.waitForDeployment();
  const swapAddress = await cvtcSwap.getAddress();

  console.log("‚úÖ Pool de swap d√©ploy√©:", swapAddress);

  // Configuration du pool de swap
  const cvtcToken = await ethers.getContractAt("IERC20", CVTC_TOKEN_ADDRESS);
  const cvtcBalance = await cvtcToken.balanceOf(deployer.address);

  if (cvtcBalance >= INITIAL_LIQUIDITY_CVTC) {
    // Approuver et ajouter la liquidit√©
    await cvtcToken.approve(swapAddress, INITIAL_LIQUIDITY_CVTC);
    await cvtcSwap.addLiquidity(INITIAL_LIQUIDITY_CVTC, { value: INITIAL_LIQUIDITY_BNB });

    console.log("‚úÖ Liquidit√© ajout√©e:");
    console.log("   - BNB:", ethers.formatEther(INITIAL_LIQUIDITY_BNB));
    console.log("   - CVTC:", ethers.formatEther(INITIAL_LIQUIDITY_CVTC));
  } else {
    console.log("‚ö†Ô∏è Solde CVTC insuffisant pour la liquidit√© initiale");
    console.log("CVTC disponibles:", ethers.formatEther(cvtcBalance));
    console.log("CVTC n√©cessaires:", ethers.formatEther(INITIAL_LIQUIDITY_CVTC));
  }

  // === PHASE 2: D√âPLOIEMENT DU CONTRAT ONBOARDING ===
  console.log("\nüë• PHASE 2: D√©ploiement du contrat d'onboarding");

  const onboardingFactory = await ethers.getContractFactory("CVTCOnboarding");
  const onboarding = await onboardingFactory.deploy(CVTC_TOKEN_ADDRESS, swapAddress) as CVTCOnboarding;
  await onboarding.waitForDeployment();
  const onboardingAddress = await onboarding.getAddress();

  console.log("‚úÖ Contrat d'onboarding d√©ploy√©:", onboardingAddress);

  // === PHASE 3: CONFIGURATION DES AUTORISATIONS ===
  console.log("\nüîê PHASE 3: Configuration des autorisations");

  // Autoriser le d√©ployeur comme op√©rateur du syst√®me d'onboarding
  await onboarding.setAuthorizedOperator(deployer.address, true);
  console.log("‚úÖ D√©ployeur autoris√© comme op√©rateur");

  // Ajouter le d√©ployeur √† la whitelist du pool de swap
  await cvtcSwap.updateOwnerBot(deployer.address, true);
  console.log("‚úÖ D√©ployeur ajout√© comme owner bot du pool");

  // === PHASE 4: TESTS DE FONCTIONNALIT√â ===
  console.log("\nüß™ PHASE 4: Tests de fonctionnalit√© de base");

  // Test des constantes
  const initialLoan = await onboarding.INITIAL_LOAN();
  const dailySwap = await onboarding.DAILY_SWAP_AMOUNT();
  console.log("‚úÖ Constantes v√©rifi√©es:");
  console.log("   - Pr√™t initial:", ethers.formatEther(initialLoan), "BNB");
  console.log("   - Swap quotidien:", ethers.formatEther(dailySwap), "BNB");

  // Test des r√©servess du pool
  const reserves = await cvtcSwap.getReserves();
  console.log("‚úÖ R√©serves du pool v√©rifi√©es:");
  console.log("   - BNB:", ethers.formatEther(reserves[0]));
  console.log("   - CVTC:", ethers.formatEther(reserves[1]));

  // === PHASE 5: SAUVEGARDE DE LA CONFIGURATION ===
  console.log("\nüíæ PHASE 5: Sauvegarde de la configuration compl√®te");

  const fullConfig = {
    network: "bsc-testnet",
    deployedAt: new Date().toISOString(),
    contracts: {
      cvtcToken: CVTC_TOKEN_ADDRESS,
      cvtcSwap: swapAddress,
      cvtcOnboarding: onboardingAddress
    },
    initialLiquidity: {
      bnb: INITIAL_LIQUIDITY_BNB.toString(),
      cvtc: INITIAL_LIQUIDITY_CVTC.toString()
    },
    deployer: deployer.address,
    notes: [
      "Le pool de swap est configur√© comme 'invisible' - il fonctionne en arri√®re-plan",
      "Le contrat d'onboarding g√®re automatiquement les 30 jours et les remboursements progressifs",
      "Les premiers utilisateurs b√©n√©ficieront de transactions gasless via Pimlico",
      "Le syst√®me est pr√™t pour l'int√©gration frontend et backend"
    ]
  };

  const fs = require("fs");
  const dir = "./deployments";
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir);
  }

  fs.writeFileSync("./deployments/full-onboarding-system.json", JSON.stringify(fullConfig, null, 2));
  console.log("üìÑ Configuration compl√®te sauvegard√©e dans ./deployments/full-onboarding-system.json");

  // === PHASE 6: R√âSUM√â FINAL ===
  console.log("\nüéâ D√âPLOIEMENT TERMIN√â AVEC SUCC√àS!");
  console.log("=".repeat(60));
  console.log("SYST√àME D'ONBOARDING CVTC - CONFIGURATION COMPL√àTE");
  console.log("=".repeat(60));
  console.log("üìç Contrats d√©ploy√©s:");
  console.log("   ‚Ä¢ CVTC Token:", CVTC_TOKEN_ADDRESS);
  console.log("   ‚Ä¢ Pool de Swap:", swapAddress);
  console.log("   ‚Ä¢ Contrat Onboarding:", onboardingAddress);
  console.log("");
  console.log("üí∞ Liquidit√© initiale:");
  console.log("   ‚Ä¢ BNB:", ethers.formatEther(INITIAL_LIQUIDITY_BNB));
  console.log("   ‚Ä¢ CVTC:", ethers.formatEther(INITIAL_LIQUIDITY_CVTC));
  console.log("");
  console.log("‚öôÔ∏è Fonctionnalit√©s activ√©es:");
  console.log("   ‚Ä¢ Pool de swap invisible op√©rationnel");
  console.log("   ‚Ä¢ Syst√®me de pr√™t automatique (0,30‚Ç¨ BNB)");
  console.log("   ‚Ä¢ Swaps quotidiens automatiques (0,01‚Ç¨ BNB/jour)");
  console.log("   ‚Ä¢ Remboursement progressif en 3 paliers");
  console.log("   ‚Ä¢ Recyclage automatique des fonds");
  console.log("");
  console.log("üöÄ Prochaines √©tapes:");
  console.log("   1. Int√©grer Pimlico pour les 1000 premiers utilisateurs");
  console.log("   2. D√©velopper l'interface frontend d'acceptation CGU");
  console.log("   3. Configurer l'automatisation backend des swaps quotidiens");
  console.log("   4. Tester le flux complet avec de vrais utilisateurs");
  console.log("=".repeat(60));

  return {
    cvtcToken: CVTC_TOKEN_ADDRESS,
    cvtcSwap: swapAddress,
    cvtcOnboarding: onboardingAddress
  };
}

// Gestion des erreurs
main().catch((error) => {
  console.error("‚ùå Erreur lors du d√©ploiement:", error);
  process.exitCode = 1;
});