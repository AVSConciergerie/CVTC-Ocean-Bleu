import { ethers } from "hardhat";

async function main() {
  console.log("üîç V√âRIFICATION STATUT LIQUIDIT√â");
  console.log("===============================");

  const SWAP_ADDRESS = "0x8Cd8331a565769624A4735f613A44643DD2e2932";

  console.log(`üìç Contrat swap: ${SWAP_ADDRESS}`);

  const swapContract = await ethers.getContractAt("CVTCSwap", SWAP_ADDRESS);

  try {
    // V√©rifier si la liquidit√© est activ√©e
    const liquidityEnabled = await swapContract.liquidityEnabled();
    console.log(`üîÑ Liquidit√© activ√©e: ${liquidityEnabled ? '‚úÖ OUI' : '‚ùå NON'}`);

    // V√©rifier les r√©serves actuelles
    const [bnbReserve, cvtcReserve] = await swapContract.getReserves();
    console.log(`üí∞ R√©serves BNB: ${ethers.formatEther(bnbReserve)} BNB`);
    console.log(`ü™ô R√©serves CVTC: ${ethers.formatUnits(cvtcReserve, 2)} CVTC`);

    // V√©rifier les balances r√©elles du contrat
    const contractBalance = await ethers.provider.getBalance(SWAP_ADDRESS);
    console.log(`üí∞ Balance r√©elle contrat: ${ethers.formatEther(contractBalance)} BNB`);

    const cvtcToken = await ethers.getContractAt("CVTCLPToken", "0x532FC49071656C16311F2f89E6e41C53243355D3");
    const contractCvtcBalance = await cvtcToken.balanceOf(SWAP_ADDRESS);
    console.log(`ü™ô Balance CVTC contrat: ${ethers.formatUnits(contractCvtcBalance, 2)} CVTC`);

    if (!liquidityEnabled) {
      console.log("\\n‚ö†Ô∏è LIQUIDIT√â D√âSACTIV√âE - ACTION REQUISE");
      console.log("=====================================");
      console.log("Il faut activer la liquidit√© avant l'initialisation");
      console.log("Commande: npx hardhat run scripts/enable-liquidity.ts --network bsc");
    } else {
      console.log("\\n‚úÖ LIQUIDIT√â ACTIV√âE - PR√äT POUR INITIALISATION");
      console.log("===============================================");
    }

  } catch (error) {
    console.log("‚ùå Erreur:", error.message);
  }
}

main().catch(console.error);