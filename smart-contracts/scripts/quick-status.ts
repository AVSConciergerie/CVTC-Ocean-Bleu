import { ethers } from "hardhat";

async function main() {
  console.log("üìä STATUT RAPIDE - CVTC OCEAN BLEU");
  console.log("=".repeat(60));

  // V√©rification des variables d'environnement
  console.log("üîß CONFIGURATION:");
  const contracts = {
    CVTC_SWAP: process.env.CVTC_SWAP_ADDRESS,
    CVTC_PREMIUM: process.env.CVTC_PREMIUM_ADDRESS,
    LOCK: process.env.LOCK_ADDRESS,
    CVTC_COMPOUNDER: process.env.CVTC_COMPOUNDER_ADDRESS
  };

  let deployed = 0;
  let total = 0;

  for (const [name, address] of Object.entries(contracts)) {
    total++;
    if (address && address !== "0x0000000000000000000000000000000000000000") {
      console.log(`   ‚úÖ ${name}: ${address.slice(-6)}`);
      deployed++;
    } else {
      console.log(`   ‚ùå ${name}: NON D√âPLOY√â`);
    }
  }

  console.log(`\nüìà √âtat: ${deployed}/${total} contrats d√©ploy√©s`);

  // V√©rification des fonds
  console.log("\nüí∞ FONDS DISPONIBLES:");
  try {
    const privateKey = process.env.PRIVATE_KEY;
    if (privateKey) {
      const provider = new ethers.providers.JsonRpcProvider("https://data-seed-prebsc-1-s1.binance.org:8545/");
      const wallet = new ethers.Wallet(privateKey, provider);
      const balance = await provider.getBalance(wallet.address);

      console.log(`   üì§ Adresse: ${wallet.address.slice(-6)}`);
      console.log(`   üí∞ Solde: ${ethers.utils.formatEther(balance)} BNB`);

      if (balance < ethers.utils.parseEther("0.01")) {
        console.log("   ‚ö†Ô∏è  Solde faible - Risque d'√©chec de d√©ploiement");
      } else {
        console.log("   ‚úÖ Fonds suffisants");
      }
    } else {
      console.log("   ‚ùå PRIVATE_KEY manquante");
    }
  } catch (error) {
    console.log("   ‚ùå Erreur v√©rification fonds");
  }

  // V√©rification ERC-4337
  console.log("\nüîó ERC-4337:");
  const apiKey = process.env.PIMLICO_API_KEY;
  const rpcUrl = process.env.PIMLICO_RPC_URL;

  console.log(`   üîë API Key: ${apiKey ? "‚úÖ" : "‚ùå"}`);
  console.log(`   üåê RPC URL: ${rpcUrl ? "‚úÖ" : "‚ùå"}`);

  // Recommandations
  console.log("\nüéØ RECOMMANDATIONS:");

  if (deployed === total) {
    console.log("   ‚úÖ Tous les contrats d√©ploy√©s - Pr√™t pour tests !");
    console.log("   üöÄ Lance: npx hardhat run scripts/run-all-tests.ts --network bscTestnet");
  } else {
    console.log("   ‚ö†Ô∏è  Contrats manquants - D√©ploiement requis");
    console.log("   üöÄ Lance: npx hardhat run scripts/deploy-all.ts --network bscTestnet");
  }

  if (deployed > 0) {
    console.log("   üß™ Tests possibles:");
    console.log("      ‚Ä¢ npx hardhat run scripts/demo-accelerated.ts --network bscTestnet");
    console.log("      ‚Ä¢ npx hardhat run scripts/test-sender-pays-receiver-receives.ts --network bscTestnet");
  }

  console.log("\n‚è∞ Mode acc√©l√©r√©: 15 secondes = 1 mois activ√© !");
  console.log("=".repeat(60));
}

main().catch((error) => {
  console.error("‚ùå Erreur:", error);
  process.exitCode = 1;
});