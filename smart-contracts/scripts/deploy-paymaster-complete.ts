#!/usr/bin/env tsx

import { ethers } from "ethers";
import { execSync } from "child_process";
import * as fs from "fs";
import * as path from "path";
import * as dotenv from "dotenv";

// Load environment variables
dotenv.config();

async function main() {
    console.log("üöÄ D√âPLOIEMENT COMPLET DU PAYMASTER CVTC SUR BSC TESTNET\n");

    // √âtape 1: V√©rification des pr√©requis
    console.log("üìã √âtape 1: V√©rification des pr√©requis...");
    await checkPrerequisites();

    // √âtape 2: D√©ploiement du contrat
    console.log("\nüî® √âtape 2: D√©ploiement du contrat paymaster...");
    const paymasterAddress = await deployPaymaster();

    // √âtape 3: Configuration de l'int√©gration frontend
    console.log("\n‚öôÔ∏è √âtape 3: Configuration de l'int√©gration frontend...");
    await setupFrontendIntegration(paymasterAddress);

    // √âtape 4: Test du d√©ploiement
    console.log("\nüß™ √âtape 4: Test du d√©ploiement...");
    await testDeployment(paymasterAddress);

    // √âtape 5: Finalisation
    console.log("\n‚úÖ √âtape 5: Finalisation...");
    await finalizeSetup(paymasterAddress);

    console.log("\nüéâ D√âPLOIEMENT TERMIN√â AVEC SUCC√àS!");
    console.log(`üìÑ Paymaster d√©ploy√©: ${paymasterAddress}`);
    console.log("\nüìã Prochaines √©tapes:");
    console.log("1. Red√©marrez votre application frontend");
    console.log("2. Les transferts utiliseront automatiquement le paymaster CVTC");
    console.log("3. Les utilisateurs payeront les frais en CVTC au lieu de BNB");
}

async function checkPrerequisites() {
    // V√©rifier la cl√© priv√©e
    const privateKey = process.env.PRIVATE_KEY;
    if (!privateKey) {
        throw new Error("‚ùå PRIVATE_KEY manquante dans les variables d'environnement");
    }
    console.log("‚úÖ Cl√© priv√©e trouv√©e");

    // V√©rifier Foundry
    try {
        execSync("forge --version", { stdio: "pipe" });
        console.log("‚úÖ Foundry install√©");
    } catch (error) {
        throw new Error("‚ùå Foundry n'est pas install√©. Installez-le avec: curl -L https://foundry.paradigm.xyz | bash");
    }

    // V√©rifier Node.js et npm
    try {
        execSync("node --version", { stdio: "pipe" });
        execSync("npm --version", { stdio: "pipe" });
        console.log("‚úÖ Node.js et npm install√©s");
    } catch (error) {
        throw new Error("‚ùå Node.js ou npm n'est pas install√©");
    }

    // V√©rifier la connectivit√© BSC Testnet
    try {
        const provider = new ethers.JsonRpcProvider("https://api.pimlico.io/v2/97/rpc?apikey=pim_32ESGpGsTSAn7VVUj7Frd7");
        await provider.getBlockNumber();
        console.log("‚úÖ Connexion BSC Testnet OK");
    } catch (error) {
        throw new Error("‚ùå Impossible de se connecter √† BSC Testnet");
    }

    console.log("‚úÖ Tous les pr√©requis sont satisfaits!");
}

async function deployPaymaster(): Promise<string> {
    const privateKey = process.env.PRIVATE_KEY!;
    const provider = new ethers.JsonRpcProvider("https://api.pimlico.io/v2/97/rpc?apikey=pim_32ESGpGsTSAn7VVUj7Frd7");
    const signer = new ethers.Wallet(privateKey, provider);

    console.log(`üë§ D√©ployeur: ${signer.address}`);
    console.log(`üí∞ Balance: ${ethers.formatEther(await provider.getBalance(signer.address))} BNB`);

    // V√©rifier le solde
    const balance = await provider.getBalance(signer.address);
    if (balance < ethers.parseEther("0.01")) {
        throw new Error("‚ùå Solde insuffisant pour le d√©ploiement (minimum 0.01 BNB)");
    }

    // Compiler le contrat
    console.log("üî® Compilation du contrat...");
    execSync("cd /Users/utilisateur/Documents/GitHub/CVTC-Ocean-Bleu/smart-contracts && forge build", {
        stdio: "inherit"
    });

    // D√©ployer avec Foundry
    console.log("üì§ D√©ploiement en cours...");
    process.env.DEPLOYER_ADDRESS = signer.address;

    const deployCommand = `cd /Users/utilisateur/Documents/GitHub/CVTC-Ocean-Bleu/smart-contracts && forge script script/DeployPaymaster.s.sol --rpc-url https://api.pimlico.io/v2/97/rpc?apikey=pim_32ESGpGsTSAn7VVUj7Frd7 --private-key ${privateKey} --broadcast --verify`;

    const result = execSync(deployCommand, {
        encoding: 'utf-8',
        stdio: 'pipe'
    });

    // Extraire l'adresse du contrat
    const addressMatch = result.match(/CVTC Paymaster deployed at: (0x[a-fA-F0-9]{40})/);
    if (!addressMatch) {
        console.error("Sortie du d√©ploiement:", result);
        throw new Error("‚ùå Impossible d'extraire l'adresse du paymaster");
    }

    const paymasterAddress = addressMatch[1];
    console.log(`‚úÖ Paymaster d√©ploy√©: ${paymasterAddress}`);

    return paymasterAddress;
}

async function setupFrontendIntegration(paymasterAddress: string) {
    // Cr√©er la configuration PimlicoContext
    const contextContent = `import React, { createContext, useContext, useState, useEffect } from 'react';
import { createWalletClient, custom } from 'viem';
import { privateKeyToAccount } from 'viem/accounts';
import { createPublicClient, http } from 'viem';
import { bscTestnet } from 'viem/chains';
import { ethers } from 'ethers';

// Configuration Paymaster BSC Testnet
const PAYMASTER_CONFIG = {
    bscTestnet: {
        chainId: 97,
        rpcUrl: "https://api.pimlico.io/v2/97/rpc?apikey=pim_32ESGpGsTSAn7VVUj7Frd7",
        bundlerUrl: "https://public.pimlico.io/v2/97/rpc",
        paymasterAddress: "${paymasterAddress}",
        entryPointAddress: "0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789",
        cvtcTokenAddress: "0x532FC49071656C16311F2f89E6e41C53243355D3"
    }
};

// ABI Paymaster
const PAYMASTER_ABI = ${JSON.stringify([
    "function entryPoint() view returns (address)",
    "function cvtcToken() view returns (address)",
    "function owner() view returns (address)",
    "function supportedTokens(address) view returns (bool)",
    "function tokenPrices(address) view returns (uint256)",
    "function getPaymasterData(address token) view returns (bytes)",
    "function getPaymasterStubData(address token) view returns (bytes)",
    "function getTokenQuote(address token, uint256 gasLimit) view returns (uint256)"
], null, 4)};

const PimlicoContext = createContext();

export function PimlicoProvider({ children }) {
    const [smartAccount, setSmartAccount] = useState(null);
    const [smartAccountAddress, setSmartAccountAddress] = useState(null);
    const [error, setError] = useState(null);
    const [paymaster, setPaymaster] = useState(null);

    const config = PAYMASTER_CONFIG.bscTestnet;

    useEffect(() => {
        initializePaymaster();
    }, []);

    const initializePaymaster = async () => {
        try {
            console.log('üîß Initialisation du Paymaster CVTC...');

            const provider = new ethers.JsonRpcProvider(config.rpcUrl);
            const paymasterContract = new ethers.Contract(
                config.paymasterAddress,
                PAYMASTER_ABI,
                provider
            );

            setPaymaster(paymasterContract);
            console.log('‚úÖ Paymaster initialis√©:', config.paymasterAddress);

            // V√©rifier que CVTC est support√©
            const cvtcSupported = await paymasterContract.supportedTokens(config.cvtcTokenAddress);
            console.log('CVTC support√©:', cvtcSupported);

        } catch (err) {
            console.error('‚ùå Erreur initialisation paymaster:', err);
            setError(\`Erreur paymaster: \${err.message}\`);
        }
    };

    const getPaymasterData = async (tokenAddress = config.cvtcTokenAddress) => {
        if (!paymaster) {
            throw new Error('Paymaster not initialized');
        }

        try {
            const paymasterData = await paymaster.getPaymasterData(tokenAddress);
            console.log('Paymaster data g√©n√©r√©');
            return paymasterData;
        } catch (err) {
            console.error('Erreur getPaymasterData:', err);
            throw err;
        }
    };

    const getPaymasterStubData = async (tokenAddress = config.cvtcTokenAddress) => {
        if (!paymaster) {
            throw new Error('Paymaster not initialized');
        }

        try {
            const stubData = await paymaster.getPaymasterStubData(tokenAddress);
            console.log('Paymaster stub data g√©n√©r√©');
            return stubData;
        } catch (err) {
            console.error('Erreur getPaymasterStubData:', err);
            throw err;
        }
    };

    const getTokenQuote = async (gasLimit, tokenAddress = config.cvtcTokenAddress) => {
        if (!paymaster) {
            throw new Error('Paymaster not initialized');
        }

        try {
            const quote = await paymaster.getTokenQuote(tokenAddress, gasLimit);
            console.log(\`Quote pour \${gasLimit} gas: \${ethers.formatEther(quote)} CVTC\`);
            return quote;
        } catch (err) {
            console.error('Erreur getTokenQuote:', err);
            throw err;
        }
    };

    const value = {
        smartAccount,
        smartAccountAddress,
        error,
        paymaster,
        config,
        getPaymasterData,
        getPaymasterStubData,
        getTokenQuote
    };

    return (
        <PimlicoContext.Provider value={value}>
            {children}
        </PimlicoContext.Provider>
    );
}

export function usePimlico() {
    const context = useContext(PimlicoContext);
    if (!context) {
        throw new Error('usePimlico must be used within a PimlicoProvider');
    }
    return context;
}

export default PimlicoContext;`;

    // √âcrire le fichier PimlicoContext
    const contextPath = path.join(__dirname, '../../frontend/src/context/PimlicoContext.jsx');
    fs.writeFileSync(contextPath, contextContent);
    console.log('‚úÖ PimlicoContext mis √† jour');

    // Cr√©er les utilitaires paymaster
    const utilsContent = `import { ethers } from 'ethers';

/**
 * Utilitaires Paymaster CVTC pour BSC Testnet
 */
export class PaymasterUtils {
    constructor(paymasterContract, cvtcTokenAddress) {
        this.paymaster = paymasterContract;
        this.cvtcToken = cvtcTokenAddress;
    }

    /**
     * G√©n√®re les donn√©es paymaster pour ERC-4337
     */
    async getPaymasterData() {
        return await this.paymaster.getPaymasterData(this.cvtcToken);
    }

    /**
     * G√©n√®re les donn√©es stub pour l'estimation du gas
     */
    async getPaymasterStubData() {
        return await this.paymaster.getPaymasterStubData(this.cvtcToken);
    }

    /**
     * Calcule le co√ªt en CVTC pour une quantit√© de gas
     */
    async calculateTokenAmount(gasLimit, gasPrice = 20e9) {
        const estimatedCost = gasLimit * gasPrice;
        const quote = await this.paymaster.getTokenQuote(this.cvtcToken, gasLimit);
        return {
            estimatedCost: ethers.formatEther(estimatedCost.toString()),
            tokenAmount: ethers.formatEther(quote.toString()),
            quote: quote
        };
    }

    /**
     * V√©rifie si l'utilisateur a assez de CVTC
     */
    async checkUserBalance(userAddress, requiredAmount) {
        const tokenContract = new ethers.Contract(
            this.cvtcToken,
            ['function balanceOf(address) view returns (uint256)'],
            this.paymaster.runner.provider
        );

        const balance = await tokenContract.balanceOf(userAddress);
        return {
            hasEnough: balance >= requiredAmount,
            balance: ethers.formatEther(balance),
            required: ethers.formatEther(requiredAmount)
        };
    }
}

export default PaymasterUtils;`;

    // √âcrire les utilitaires
    const utilsPath = path.join(__dirname, '../../frontend/src/services/paymasterUtils.js');
    fs.writeFileSync(utilsPath, utilsContent);
    console.log('‚úÖ Utilitaires paymaster cr√©√©s');

    // Mettre √† jour package.json
    const packageJsonPath = path.join(__dirname, '../package.json');
    let packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));

    packageJson.scripts = {
        ...packageJson.scripts,
        "deploy-paymaster": "tsx scripts/deploy-paymaster.ts",
        "test-paymaster": "tsx scripts/test-paymaster.ts",
        "setup-paymaster": "tsx scripts/setup-paymaster-integration.ts",
        "deploy-complete": "tsx scripts/deploy-paymaster-complete.ts"
    };

    fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
    console.log('‚úÖ Scripts npm mis √† jour');
}

async function testDeployment(paymasterAddress: string) {
    const privateKey = process.env.PRIVATE_KEY!;
    const provider = new ethers.JsonRpcProvider("https://api.pimlico.io/v2/97/rpc?apikey=pim_32ESGpGsTSAn7VVUj7Frd7");
    const signer = new ethers.Wallet(privateKey, provider);

    // ABI simplifi√© pour les tests
    const testAbi = [
        "function entryPoint() view returns (address)",
        "function cvtcToken() view returns (address)",
        "function supportedTokens(address) view returns (bool)",
        "function tokenPrices(address) view returns (uint256)",
        "function getPaymasterData(address token) view returns (bytes)"
    ];

    const paymaster = new ethers.Contract(paymasterAddress, testAbi, signer);

    // Test 1: V√©rifier l'adresse de l'EntryPoint
    const entryPoint = await paymaster.entryPoint();
    console.log(`‚úÖ EntryPoint: ${entryPoint}`);
    if (entryPoint !== "0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789") {
        throw new Error("‚ùå EntryPoint incorrect");
    }

    // Test 2: V√©rifier l'adresse CVTC
    const cvtcToken = await paymaster.cvtcToken();
    console.log(`‚úÖ CVTC Token: ${cvtcToken}`);
    if (cvtcToken !== "0x532FC49071656C16311F2f89E6e41C53243355D3") {
        throw new Error("‚ùå CVTC Token incorrect");
    }

    // Test 3: V√©rifier que CVTC est support√©
    const cvtcSupported = await paymaster.supportedTokens("0x532FC49071656C16311F2f89E6e41C53243355D3");
    console.log(`‚úÖ CVTC support√©: ${cvtcSupported}`);
    if (!cvtcSupported) {
        throw new Error("‚ùå CVTC n'est pas support√©");
    }

    // Test 4: V√©rifier le prix CVTC
    const cvtcPrice = await paymaster.tokenPrices("0x532FC49071656C16311F2f89E6e41C53243355D3");
    console.log(`‚úÖ Prix CVTC: ${ethers.formatEther(cvtcPrice)} ETH par token`);

    // Test 5: G√©n√©rer les donn√©es paymaster
    const paymasterData = await paymaster.getPaymasterData("0x532FC49071656C16311F2f89E6e41C53243355D3");
    console.log(`‚úÖ Donn√©es paymaster g√©n√©r√©es: ${paymasterData.substring(0, 66)}...`);

    console.log("‚úÖ Tous les tests de d√©ploiement r√©ussis!");
}

async function finalizeSetup(paymasterAddress: string) {
    // Cr√©er le fichier de configuration
    const config = {
        network: "BSC Testnet",
        chainId: 97,
        paymasterAddress,
        entryPointAddress: "0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789",
        cvtcTokenAddress: "0x532FC49071656C16311F2f89E6e41C53243355D3",
        rpcUrl: "https://api.pimlico.io/v2/97/rpc?apikey=pim_32ESGpGsTSAn7VVUj7Frd7",
        bundlerUrl: "https://public.pimlico.io/v2/97/rpc",
        deployedAt: new Date().toISOString(),
        version: "1.0.0"
    };

    fs.writeFileSync('./paymaster-config.json', JSON.stringify(config, null, 2));
    console.log('‚úÖ Configuration sauvegard√©e');

    // Cr√©er un r√©sum√© du d√©ploiement
    const summary = `
üéâ PAYMASTER CVTC D√âPLOY√â AVEC SUCC√àS!

üìä R√âSUM√â DU D√âPLOIEMENT:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìç R√©seau: BSC Testnet (Chain ID: 97)
üìÑ Paymaster: ${paymasterAddress}
üéØ Token: CVTC (0x532FC49071656C16311F2f89E6e41C53243355D3)
‚ö° EntryPoint: 0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789
üîó Bundler: https://public.pimlico.io/v2/97/rpc

üí∞ FONCTIONNALIT√âS:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚úÖ Paymaster ERC-20 op√©rationnel
‚úÖ Support CVTC natif
‚úÖ Int√©gration Pimlico compl√®te
‚úÖ Gas sponsoring automatique
‚úÖ Transactions ERC-4337

üöÄ UTILISATION:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
1. Red√©marrez votre application frontend
2. Les transferts utiliseront automatiquement le paymaster
3. Les utilisateurs payeront en CVTC au lieu de BNB
4. Profitez des transactions sans friction!

üìã COMMANDES DISPONIBLES:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚Ä¢ npm run deploy-paymaster    # Red√©ployer le paymaster
‚Ä¢ npm run test-paymaster      # Tester les fonctionnalit√©s
‚Ä¢ npm run setup-paymaster     # Reconfigurer l'int√©gration

‚ö†Ô∏è NOTES IMPORTANTES:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚Ä¢ Le paymaster sponsorise les frais de gas
‚Ä¢ Les utilisateurs doivent avoir des CVTC
‚Ä¢ Prix par d√©faut: 1 CVTC = 1 ETH √©quivalent
‚Ä¢ Configurable pour d'autres tokens si besoin

üìû SUPPORT:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
En cas de probl√®me, v√©rifiez:
1. Solde CVTC de l'utilisateur
2. Configuration r√©seau BSC Testnet
3. Logs de la console pour les erreurs

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üéä D√âPLOIEMENT TERMIN√â - PR√äT POUR LA PRODUCTION!
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
`;

    fs.writeFileSync('./DEPLOYMENT_SUMMARY.md', summary);
    console.log('‚úÖ R√©sum√© du d√©ploiement cr√©√©');

    // Afficher le r√©sum√©
    console.log(summary);
}

// Gestionnaire d'erreurs global
process.on('unhandledRejection', (error) => {
    console.error('‚ùå Erreur non g√©r√©e:', error);
    process.exit(1);
});

// Ex√©cution du script
if (require.main === module) {
    main().catch((error) => {
        console.error('‚ùå Erreur lors du d√©ploiement:', error);
        process.exit(1);
    });
}

export { main };