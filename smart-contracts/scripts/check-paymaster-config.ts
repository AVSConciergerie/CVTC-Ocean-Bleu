import { ethers } from "hardhat";

async function main() {
  console.log("üîß V√âRIFICATION CONFIGURATION PAYMASTER");
  console.log("=====================================");

  const PAYMASTER_ADDRESS = "0x950c9E7ea88beF525E5fFA072E7F092E2B0f7516";
  const CVTC_ADDRESS = "0x532FC49071656C16311F2f89E6e41C53243355D3";
  const ENTRY_POINT = "0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789";

  const provider = new ethers.JsonRpcProvider("https://api.pimlico.io/v2/97/rpc?apikey=pim_32ESGpGsTSAn7VVUj7Frd7");

  try {
    // Cr√©er l'instance du contrat paymaster
    const paymasterABI = [
      "function entryPoint() view returns (address)",
      "function cvtcToken() view returns (address)",
      "function owner() view returns (address)",
      "function supportedTokens(address) view returns (bool)",
      "function tokenPrices(address) view returns (uint256)",
      "function getPaymasterData(address token) view returns (bytes)",
      "function getPaymasterStubData(address token) view returns (bytes)",
      "function getTokenQuote(address token, uint256 gasLimit) view returns (uint256)"
    ];

    const paymaster = new ethers.Contract(PAYMASTER_ADDRESS, paymasterABI, provider);

    console.log(`üè¶ Paymaster: ${PAYMASTER_ADDRESS}`);
    console.log(`ü™ô CVTC Token: ${CVTC_ADDRESS}`);
    console.log(`üéØ EntryPoint: ${ENTRY_POINT}`);

    // V√©rifier l'EntryPoint
    console.log(`\\nüîç V√âRIFICATION ENTRYPOINT:`);
    try {
      const entryPoint = await paymaster.entryPoint();
      console.log(`EntryPoint configur√©: ${entryPoint}`);
      console.log(`EntryPoint correct: ${entryPoint === ENTRY_POINT ? '‚úÖ' : '‚ùå'}`);
    } catch (error) {
      console.log(`‚ùå Erreur EntryPoint: ${error.message}`);
    }

    // V√©rifier le token CVTC
    console.log(`\\nüîç V√âRIFICATION TOKEN CVTC:`);
    try {
      const cvtcToken = await paymaster.cvtcToken();
      console.log(`CVTC Token configur√©: ${cvtcToken}`);
      console.log(`CVTC Token correct: ${cvtcToken === CVTC_ADDRESS ? '‚úÖ' : '‚ùå'}`);
    } catch (error) {
      console.log(`‚ùå Erreur CVTC Token: ${error.message}`);
    }

    // V√©rifier le propri√©taire
    console.log(`\\nüîç V√âRIFICATION PROPRI√âTAIRE:`);
    try {
      const owner = await paymaster.owner();
      console.log(`Propri√©taire: ${owner}`);
    } catch (error) {
      console.log(`‚ùå Erreur propri√©taire: ${error.message}`);
    }

    // V√©rifier si CVTC est support√©
    console.log(`\\nüîç V√âRIFICATION SUPPORT CVTC:`);
    try {
      const isSupported = await paymaster.supportedTokens(CVTC_ADDRESS);
      console.log(`CVTC support√©: ${isSupported ? '‚úÖ' : '‚ùå'}`);

      if (isSupported) {
        const price = await paymaster.tokenPrices(CVTC_ADDRESS);
        console.log(`Prix CVTC: ${ethers.formatUnits(price, 0)} wei par token`);
      }
    } catch (error) {
      console.log(`‚ùå Erreur support CVTC: ${error.message}`);
    }

    // Tester getPaymasterData
    console.log(`\\nüîç TEST GETPAYMASTERDATA:`);
    try {
      const paymasterData = await paymaster.getPaymasterData(CVTC_ADDRESS);
      console.log(`PaymasterData g√©n√©r√©: ${paymasterData}`);
      console.log(`Longueur: ${paymasterData.length} bytes`);
    } catch (error) {
      console.log(`‚ùå Erreur getPaymasterData: ${error.message}`);
    }

    // Tester getTokenQuote
    console.log(`\\nüîç TEST GETTOKENQUOTE:`);
    try {
      const gasLimit = 100000n;
      const quote = await paymaster.getTokenQuote(CVTC_ADDRESS, gasLimit);
      console.log(`Quote pour ${gasLimit} gas: ${ethers.formatUnits(quote, 2)} CVTC`);
    } catch (error) {
      console.log(`‚ùå Erreur getTokenQuote: ${error.message}`);
    }

    console.log(`\\nüéØ ANALYSE:`);
    console.log(`==========`);

    console.log(`‚úÖ Paymaster d√©ploy√© √† l'adresse correcte`);
    console.log(`‚ùì Configuration √† v√©rifier manuellement`);
    console.log(`üí° Si tout est correct, le probl√®me vient du frontend`);

  } catch (error: any) {
    console.error("‚ùå Erreur g√©n√©rale:", error.message);
  }
}

main().catch(console.error);