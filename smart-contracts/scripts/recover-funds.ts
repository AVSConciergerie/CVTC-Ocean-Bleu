import { ethers } from "hardhat";

async function main() {
  console.log("üîÑ R√©cup√©ration des fonds de l'ancien contrat");

  try {
    // Ancien contrat
    const oldContractAddress = "0x36FBc44E789e41F8383f11312e496aDc922CEEDa";

    // Adresses impliqu√©es
    const senderAddress = "0x71438578893865F0664EdC067B10263c2CF92a1b";
    const receiverAddress = "0x1EdB8DD2C5d6c25B7661316ae57C3E95E0cF6389";

    const CVTCPremium = await ethers.getContractFactory("CVTCPremium");
    const oldContract = CVTCPremium.attach(oldContractAddress);

    console.log("üìã Tentative de r√©cup√©ration des fonds...");

    // Essayer de d√©clencher les lib√©rations dues
    console.log("üöÄ D√©clenchement des lib√©rations en attente...");
    const tx = await oldContract.processPendingReleases();
    const receipt = await tx.wait();

    console.log("‚úÖ Lib√©rations trait√©es !");
    console.log(`üìã Transaction: ${receipt.hash}`);

    // V√©rifier les √©v√©nements de lib√©ration
    const releaseEvents = receipt.logs.filter(log => {
      try {
        return oldContract.interface.parseLog(log).name === "StaggeredReleaseExecuted";
      } catch {
        return false;
      }
    });

    if (releaseEvents.length > 0) {
      console.log(`üéâ ${releaseEvents.length} lib√©ration(s) ex√©cut√©e(s) !`);

      releaseEvents.forEach((log, index) => {
        const event = oldContract.interface.parseLog(log);
        console.log(`   üì¶ Lib√©ration ${index + 1}: ${ethers.formatUnits(event.args.amount, 2)} CVTC ‚Üí ${event.args.receiver}`);
      });
    } else {
      console.log("‚ÑπÔ∏è Aucune lib√©ration n'√©tait due pour le moment.");
    }

    // V√©rifier l'√©tat apr√®s r√©cup√©ration
    const transferAfter = await oldContract.getStaggeredTransferInfo(1);
    console.log(`\nüìä √âtat apr√®s r√©cup√©ration:`);
    console.log(`   - Restant: ${ethers.formatUnits(transferAfter[3], 2)} CVTC`);
    console.log(`   - √âtape actuelle: ${transferAfter[4]}`);
    console.log(`   - Actif: ${transferAfter[7]}`);

    // V√©rifier le solde du destinataire
    const cvtcToken = await ethers.getContractAt("IERC20", "0x532FC49071656C16311F2f89E6e41C53243355D3");
    const receiverBalance = await cvtcToken.balanceOf(receiverAddress);
    console.log(`üí∞ Solde du destinataire: ${ethers.formatUnits(receiverBalance, 2)} CVTC`);

  } catch (error: any) {
    console.log("‚ùå Erreur:", error?.message || "Erreur inconnue");
  }
}

main().catch((error) => {
  console.error("‚ùå Erreur critique:", error);
  process.exitCode = 1;
});