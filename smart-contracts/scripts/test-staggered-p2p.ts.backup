import { ethers } from "hardhat";

async function main() {
  console.log("üîÑ Test SYST√àME D'√âCHELONNEMENT P2P - R√©ception progressive 1, 2, 4, 8, 16, 32...");

  const [deployer, user1, user2] = await ethers.getSigners();
  console.log(`üìã Deployer: ${deployer.address}`);
  console.log(`üë§ User1: ${user1.address}`);
  console.log(`üë§ User2: ${user2.address}`);

  // Adresses des contrats
  const cvtcPremiumAddress = process.env.CVTC_PREMIUM_ADDRESS;

  if (!cvtcPremiumAddress) {
    console.log("‚ùå Adresse CVTC_PREMIUM_ADDRESS manquante.");
    console.log("üí° D√©ployez d'abord: npx hardhat run scripts/deploy-all.ts --network bscTestnet");
    return;
  }

  console.log(`üëë CVTC Premium: ${cvtcPremiumAddress}`);

  try {
    const CVTCPremium = await ethers.getContractFactory("CVTCPremium");
    const cvtcPremium = CVTCPremium.attach(cvtcPremiumAddress) as any;

    // 1. Configuration de l'√©chelonnement
    console.log("\n‚öôÔ∏è Configuration de l'√âchelonnement:");
    const threshold = await cvtcPremium.STAGGERED_THRESHOLD();
    const interval = await cvtcPremium.STAGGERED_INTERVAL();
    const maxSteps = await cvtcPremium.MAX_STAGGERED_STEPS();

    console.log(`üí∞ Seuil √©chelonnement: ${ethers.utils.formatEther(threshold)} CVTC`);
    console.log(`‚è∞ Interval entre √©tapes: ${interval} secondes`);
    console.log(`üìä Maximum d'√©tapes: ${maxSteps}`);

    // 2. Abonnements premium pour les tests
    console.log("\nüëë Abonnements Premium:");
    for (const user of [user1, user2]) {
      const tx = await user.sendTransaction({
        to: cvtcPremiumAddress,
        value: ethers.utils.parseEther("5.0"),
      });
      await tx.wait();
      console.log(`‚úÖ ${user.address.slice(-6)} abonn√©`);
    }

    // 3. Test de calcul de s√©quence d'√©chelonnement
    console.log("\nüßÆ Test de Calcul de S√©quence:");

    const testAmounts = [
      ethers.utils.parseEther("1000"),  // 1000 CVTC - seuil minimum
      ethers.utils.parseEther("1500"),  // 1500 CVTC
      ethers.utils.parseEther("2500"),  // 2500 CVTC
      ethers.utils.parseEther("5000"),  // 5000 CVTC
    ];

    for (const amount of testAmounts) {
      console.log(`\nüí∞ Montant: ${ethers.utils.formatEther(amount)} CVTC`);

      // Calculer la s√©quence (simulation c√¥t√© client)
      const sequence = calculateReleaseSequence(amount);
      console.log(`üìã S√©quence: ${sequence.map(s => ethers.utils.formatEther(s)).join(' ‚Üí ')}`);
      console.log(`‚è±Ô∏è  √âtapes: ${sequence.length}, Total: ${ethers.utils.formatEther(sequence.reduce((a, b) => a + b, 0n))} CVTC`);
    }

    // 4. Initiation d'un transfert √©chelonn√©
    console.log("\nüöÄ Initiation d'un Transfert √âchelonn√©:");

    const transferAmount = ethers.utils.parseEther("1500"); // 1500 CVTC
    console.log(`üì§ Transfert: ${ethers.utils.formatEther(transferAmount)} CVTC`);
    console.log(`üë§ De: ${user1.address.slice(-6)} ‚Üí √Ä: ${user2.address.slice(-6)}`);

    // Initier le transfert √©chelonn√©
    await cvtcPremium.connect(user1).initiateStaggeredTransfer(user2.address, transferAmount);

    // R√©cup√©rer l'ID du transfert
    const staggeredStats = await cvtcPremium.getStaggeredStats();
    const transferId = staggeredStats[0]; // Dernier transfert cr√©√©

    console.log(`‚úÖ Transfert √©chelonn√© initi√© - ID: ${transferId}`);

    // V√©rifier les d√©tails du transfert
    const transferInfo = await cvtcPremium.getStaggeredTransferInfo(transferId);
    console.log(`üìä D√©tails du transfert:`);
    console.log(`   ‚Ä¢ Montant total: ${ethers.utils.formatEther(transferInfo[2])} CVTC`);
    console.log(`   ‚Ä¢ Restant: ${ethers.utils.formatEther(transferInfo[3])} CVTC`);
    console.log(`   ‚Ä¢ √âtape actuelle: ${transferInfo[4]}`);
    console.log(`   ‚Ä¢ Prochaine lib√©ration: ${new Date(Number(transferInfo[5]) * 1000).toISOString()}`);
    console.log(`   ‚Ä¢ S√©quence: ${transferInfo[6].map((s: any) => ethers.utils.formatEther(s)).join(' ‚Üí ')}`);
    console.log(`   ‚Ä¢ Actif: ${transferInfo[7]}`);

    // 5. Simulation des lib√©rations √©chelonn√©es
    console.log("\n‚è≥ Simulation des Lib√©rations √âchelonn√©es:");

    const releaseSchedule = transferInfo[6];
    let totalReleased = 0;

    for (let step = 0; step < releaseSchedule.length; step++) {
      console.log(`\nüìÖ √âtape ${step + 1}/${releaseSchedule.length}`);

      const releaseAmount = releaseSchedule[step];
      const canExecute = await cvtcPremium.canExecuteRelease(transferId, user2.address);

      if (canExecute) {
        console.log(`‚úÖ Lib√©ration possible: ${ethers.utils.formatEther(releaseAmount)} CVTC`);

        // Ex√©cuter la lib√©ration
        await cvtcPremium.connect(user2).executeStaggeredRelease(transferId);

        totalReleased += Number(ethers.utils.formatEther(releaseAmount));
        console.log(`üí∞ Lib√©ration ex√©cut√©e! Total re√ßu: ${totalReleased} CVTC`);

        // V√©rifier l'√©tat apr√®s lib√©ration
        const updatedInfo = await cvtcPremium.getStaggeredTransferInfo(transferId);
        console.log(`   ‚Ä¢ Restant: ${ethers.utils.formatEther(updatedInfo[3])} CVTC`);
        console.log(`   ‚Ä¢ √âtape actuelle: ${updatedInfo[4]}`);

        // Attendre l'interval entre √©tapes (sauf derni√®re √©tape)
        if (step < releaseSchedule.length - 1) {
          console.log(`‚è∞ Attente de ${interval} secondes avant la prochaine lib√©ration...`);
          await new Promise(resolve => setTimeout(resolve, 2000)); // 2 secondes pour simulation
        }
      } else {
        console.log(`‚è≥ Lib√©ration pas encore disponible`);
      }
    }

    // 6. V√©rification finale
    console.log("\nüéØ V√©rification Finale:");

    const finalInfo = await cvtcPremium.getStaggeredTransferInfo(transferId);
    const finalStats = await cvtcPremium.getStaggeredStats();

    console.log(`‚úÖ Transfert termin√©: ${!finalInfo[7]}`);
    console.log(`üìä Statistiques:`);
    console.log(`   ‚Ä¢ Transferts √©chelonn√©s totaux: ${finalStats[0]}`);
    console.log(`   ‚Ä¢ Lib√©rations totales: ${ethers.utils.formatEther(finalStats[1])} CVTC`);
    console.log(`   ‚Ä¢ Transferts actifs: ${finalStats[2]}`);

    // 7. Test avec un montant plus important
    console.log("\nüß™ Test avec Montant Plus Important:");

    const largeAmount = ethers.utils.parseEther("5000"); // 5000 CVTC
    console.log(`üì§ Gros transfert: ${ethers.utils.formatEther(largeAmount)} CVTC`);

    const largeSequence = calculateReleaseSequence(largeAmount);
    console.log(`üìã S√©quence calcul√©e: ${largeSequence.map(s => ethers.utils.formatEther(s)).join(' ‚Üí ')}`);
    console.log(`‚è±Ô∏è  √âtapes n√©cessaires: ${largeSequence.length}`);

    // Calcul du r√©sum√©
    const totalSteps = largeSequence.length;
    const maxRelease = Math.max(...largeSequence.map(s => Number(ethers.utils.formatEther(s))));
    const avgRelease = largeSequence.reduce((a, b) => a + Number(ethers.utils.formatEther(b)), 0) / totalSteps;

    console.log(`üìä Analyse:`);
    console.log(`   ‚Ä¢ Nombre d'√©tapes: ${totalSteps}`);
    console.log(`   ‚Ä¢ Lib√©ration maximale: ${maxRelease} CVTC`);
    console.log(`   ‚Ä¢ Lib√©ration moyenne: ${avgRelease.toFixed(2)} CVTC`);
    console.log(`   ‚Ä¢ Dur√©e totale: ${(totalSteps - 1) * Number(interval) / 3600} heures`);

    console.log("\nüéâ Test √âchelonnement P2P termin√© avec succ√®s!");
    console.log("‚úÖ Syst√®me d'√©chelonnement op√©rationnel");
    console.log("‚úÖ S√©quence g√©om√©trique 1, 2, 4, 8, 16, 32... fonctionnelle");
    console.log("‚úÖ Lib√©rations progressives automatiques");
    console.log("‚úÖ Gestion du temps et des √©tapes parfaite");
    console.log("‚úÖ Transferts de gros montants optimis√©s");

  } catch (error: any) {
    console.log("‚ùå Erreur lors du test d'√©chelonnement:", error?.message || "Erreur inconnue");
  }
}

// Fonction utilitaire pour calculer la s√©quence d'√©chelonnement
function calculateReleaseSequence(totalAmount: bigint): bigint[] {
  const schedule: bigint[] = [];
  let remaining = totalAmount;
  let stepAmount = 1n * 10n**18n; // 1 CVTC en wei
  const maxSteps = 10;

  while (remaining > 0n && schedule.length < maxSteps) {
    if (stepAmount >= remaining) {
      // Derni√®re √©tape : transf√©rer le reste
      schedule.push(remaining);
      remaining = 0n;
    } else {
      // √âtape normale
      schedule.push(stepAmount);
      remaining -= stepAmount;
    }

    stepAmount *= 2n; // Doubler pour la prochaine √©tape
  }

  return schedule;
}

main().catch((error) => {
  console.error("‚ùå Erreur:", error);
  process.exitCode = 1;
});