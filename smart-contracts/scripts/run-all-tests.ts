import { execSync } from 'child_process';
import * as fs from 'fs';
import * as path from 'path';

async function main() {
  console.log("üöÄ EX√âCUTION DE TOUS LES TESTS - CVTC OCEAN BLEU");
  console.log("=".repeat(80));
  console.log(`‚è∞ D√©but: ${new Date().toISOString()}`);

  const testResults = {
    comprehensive: false,
    deployment: false,
    accelerated: false,
    senderReceiver: false,
    aaInteractions: false
  };

  const network = process.env.NETWORK || 'bscTestnet';

  try {
    // 1. TEST COMPREHENSIF
    console.log("\nüß™ 1. TEST COMPREHENSIF");
    console.log("-".repeat(50));

    try {
      console.log("Ex√©cution: comprehensive-test-suite.ts");
      execSync(`npx hardhat run scripts/comprehensive-test-suite.ts --network ${network}`, {
        stdio: 'inherit',
        cwd: process.cwd()
      });
      testResults.comprehensive = true;
      console.log("‚úÖ Test compr√©hensif r√©ussi");
    } catch (error) {
      console.log("‚ùå Test compr√©hensif √©chou√©");
      testResults.comprehensive = false;
    }

    // 2. V√âRIFICATION DES D√âPLOIEMENTS
    console.log("\nüìã 2. V√âRIFICATION DES D√âPLOIEMENTS");
    console.log("-".repeat(50));

    try {
      console.log("Ex√©cution: check-deployment.ts");
      execSync(`npx hardhat run scripts/check-deployment.ts --network ${network}`, {
        stdio: 'inherit',
        cwd: process.cwd()
      });
      testResults.deployment = true;
      console.log("‚úÖ V√©rification d√©ploiements r√©ussie");
    } catch (error) {
      console.log("‚ùå V√©rification d√©ploiements √©chou√©e");
      testResults.deployment = false;
    }

    // 3. TEST MODE ACC√âL√âR√â
    console.log("\n‚ö° 3. TEST MODE ACC√âL√âR√â");
    console.log("-".repeat(50));

    try {
      console.log("Ex√©cution: demo-accelerated.ts");
      execSync(`npx hardhat run scripts/demo-accelerated.ts --network ${network}`, {
        stdio: 'inherit',
        cwd: process.cwd()
      });
      testResults.accelerated = true;
      console.log("‚úÖ Test acc√©l√©r√© r√©ussi");
    } catch (error) {
      console.log("‚ùå Test acc√©l√©r√© √©chou√©");
      testResults.accelerated = false;
    }

    // 4. TEST EXP√âDITEUR/DESTINATAIRE
    console.log("\nüéØ 4. TEST EXP√âDITEUR/DESTINATAIRE");
    console.log("-".repeat(50));

    try {
      console.log("Ex√©cution: test-sender-pays-receiver-receives.ts");
      execSync(`npx hardhat run scripts/test-sender-pays-receiver-receives.ts --network ${network}`, {
        stdio: 'inherit',
        cwd: process.cwd()
      });
      testResults.senderReceiver = true;
      console.log("‚úÖ Test exp√©diteur/destinataire r√©ussi");
    } catch (error) {
      console.log("‚ùå Test exp√©diteur/destinataire √©chou√©");
      testResults.senderReceiver = false;
    }

    // 5. TEST INTERACTIONS ERC-4337
    console.log("\nüîó 5. TEST INTERACTIONS ERC-4337");
    console.log("-".repeat(50));

    try {
      console.log("Ex√©cution: test-aa-interactions.ts");
      execSync(`npx hardhat run scripts/test-aa-interactions.ts --network ${network}`, {
        stdio: 'inherit',
        cwd: process.cwd()
      });
      testResults.aaInteractions = true;
      console.log("‚úÖ Test ERC-4337 r√©ussi");
    } catch (error) {
      console.log("‚ùå Test ERC-4337 √©chou√©");
      testResults.aaInteractions = false;
    }

    // 6. TESTS SUPPL√âMENTAIRES (si d√©ploy√©s)
    console.log("\nüéÆ 6. TESTS SUPPL√âMENTAIRES");
    console.log("-".repeat(50));

    const additionalTests = [
      { name: '√âchelonnement P2P', script: 'demo-staggered-p2p.ts' },
      { name: '√âchelonnement mensuel', script: 'test-monthly-staggered.ts' },
      { name: 'Syst√®me premium', script: 'test-premium-system.ts' }
    ];

    for (const test of additionalTests) {
      try {
        console.log(`Ex√©cution: ${test.script}`);
        execSync(`npx hardhat run scripts/${test.script} --network ${network}`, {
          stdio: 'inherit',
          cwd: process.cwd()
        });
        console.log(`‚úÖ ${test.name} r√©ussi`);
      } catch (error) {
        console.log(`‚ö†Ô∏è  ${test.name} √©chou√© (normal si contrats non d√©ploy√©s)`);
      }
    }

  } catch (error: any) {
    console.log(`‚ùå Erreur g√©n√©rale: ${error?.message || "Erreur inconnue"}`);
  }

  // RAPPORT FINAL
  console.log("\nüéØ RAPPORT FINAL - TOUS LES TESTS");
  console.log("=".repeat(80));

  const results = Object.entries(testResults);
  const passed = results.filter(([_, result]) => result).length;
  const total = results.length;

  console.log(`üìä Score global: ${passed}/${total} tests principaux r√©ussis`);
  console.log(`üìà Taux de r√©ussite: ${Math.round((passed / total) * 100)}%`);

  console.log("\nüìã R√âSULTATS D√âTAILL√âS:");
  results.forEach(([test, result]) => {
    const icon = result ? "‚úÖ" : "‚ùå";
    const status = result ? "R√âUSSI" : "√âCHEC";
    console.log(`   ${icon} ${test}: ${status}`);
  });

  // G√âN√âRATION DU RAPPORT
  const reportPath = path.join(process.cwd(), 'test-report.json');
  const report = {
    timestamp: new Date().toISOString(),
    network: network,
    results: testResults,
    summary: {
      total: total,
      passed: passed,
      failed: total - passed,
      successRate: Math.round((passed / total) * 100)
    },
    environment: {
      nodeVersion: process.version,
      platform: process.platform,
      cwd: process.cwd()
    }
  };

  fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
  console.log(`\nüíæ Rapport sauvegard√©: ${reportPath}`);

  console.log(`\n‚è∞ Fin: ${new Date().toISOString()}`);

  // CONCLUSION
  if (passed >= total * 0.8) { // 80% de r√©ussite minimum
    console.log("\nüéâ TESTS GLOBALEMENT R√âUSSIS !");
    console.log("üöÄ Le syst√®me est pr√™t pour les tests frontend !");
    console.log("üí° Tu peux maintenant tester l'interface utilisateur.");
  } else {
    console.log("\n‚ö†Ô∏è  TESTS PARTIELLEMENT R√âUSSIS");
    console.log("üîß Certains composants n√©cessitent attention:");
    console.log("   ‚Ä¢ V√©rifiez les d√©ploiements de contrats");
    console.log("   ‚Ä¢ V√©rifiez les configurations d'environnement");
    console.log("   ‚Ä¢ V√©rifiez les fonds sur les comptes de test");
  }

  console.log("=".repeat(80));
}

main().catch((error) => {
  console.error("‚ùå Erreur critique:", error);
  process.exitCode = 1;
});