import { ethers } from "hardhat";

async function main() {
  console.log("üîç V√âRIFICATION CONTRAT SUR BSCSCAN");
  console.log("===================================");

  const SWAP_ADDRESS = "0x9fD15619a90005468F02920Bb569c95759Da710C";
  const CVTC_TOKEN_ADDRESS = "0x532FC49071656C16311F2f89E6e41C53243355D3";

  console.log(`üìç Adresse contrat swap: ${SWAP_ADDRESS}`);
  console.log(`ü™ô Adresse token CVTC: ${CVTC_TOKEN_ADDRESS}`);

  console.log("\\nüìã INSTRUCTIONS POUR V√âRIFICATION BSCSCAN:");
  console.log("==========================================");

  console.log("\\n1Ô∏è‚É£ ALLER SUR BSCSCAN TESTNET:");
  console.log(`üåê https://testnet.bscscan.com/address/${SWAP_ADDRESS}#code`);

  console.log("\\n2Ô∏è‚É£ CLIQUER 'VERIFY AND PUBLISH':");
  console.log("   - S√©lectionner 'Solidity (Single file)'");
  console.log("   - Compiler version: v0.8.0+commit.c7dfd78e");

  console.log("\\n3Ô∏è‚É£ COLLER LE CODE SOURCE:");
  console.log("   - Ouvrir le fichier: smart-contracts/contracts/CVTCSwap.sol");
  console.log("   - Copier tout le contenu");
  console.log("   - Coller dans 'Enter the Solidity Contract Code below'");

  console.log("\\n4Ô∏è‚É£ PARAM√àTRES DE CONSTRUCCION:");
  console.log("   - Contract Name: CVTCSwap");
  console.log("   - Include Nightly Builds: No");
  console.log("   - Compiler: v0.8.0+commit.c7dfd78e");
  console.log("   - Optimization: Yes");
  console.log("   - Runs: 200");

  console.log("\\n5Ô∏è‚É£ ARGUMENTS DU CONSTRUCTEUR:");
  console.log("   - Constructor Arguments (ABI-encoded):");
  console.log(`   ${CVTC_TOKEN_ADDRESS}`);

  console.log("\\n6Ô∏è‚É£ V√âRIFIER:");
  console.log("   - Cliquer 'Verify and Publish'");
  console.log("   - Attendre la confirmation");

  console.log("\\nüéØ APR√àS V√âRIFICATION:");
  console.log("=====================");
  console.log("‚úÖ Les fonctions seront visibles dans l'onglet 'Write Contract'");
  console.log("‚úÖ Vous pourrez appeler emergencyInitialize() ou autres fonctions");
  console.log("‚úÖ Initialisation du ratio 0.00002/2.5B possible");

  console.log("\\nüîß COMMANDES HARDHAT ALTERNATIVES:");
  console.log("==================================");

  console.log("\\nSi vous pr√©f√©rez utiliser Hardhat:");
  console.log("1. Installer hardhat-etherscan:");
  console.log(`npm install --save-dev @nomiclabs/hardhat-etherscan`);

  console.log("\\n2. Configurer hardhat.config.ts:");
  console.log(`// Ajouter dans hardhat.config.ts
etherscan: {
  apiKey: process.env.BSCSCAN_API_KEY
}`);

  console.log("\\n3. V√©rifier via Hardhat:");
  console.log(`npx hardhat verify --network bscTestnet ${SWAP_ADDRESS} ${CVTC_TOKEN_ADDRESS}`);

  console.log("\\nüöÄ PR√äT POUR L'INITIALISATION FINALE!");
  console.log("=====================================");
  console.log("Une fois v√©rifi√©, nous pourrons:");
  console.log("‚úÖ Voir toutes les fonctions du contrat");
  console.log("‚úÖ Appeler emergencyInitialize()");
  console.log("‚úÖ Atteindre le ratio exact 0.00002/2.5B");
  console.log("‚úÖ Lancer l'onboarding avec volatilit√© maximale");
}

main().catch(console.error);