import { ethers } from "hardhat";

async function main() {
  console.log("üîß Configuration du pool de swap invisible pour l'onboarding...");

  // Adresses des contrats
  const CVTC_TOKEN_ADDRESS = "0x532FC49071656C16311F2f89E6e41C53243355D3"; // BSC Testnet
  const INITIAL_LIQUIDITY_BNB = ethers.parseEther("10"); // 10 BNB de liquidit√© initiale
  const INITIAL_LIQUIDITY_CVTC = ethers.parseEther("10000"); // 10,000 CVTC

  const [deployer] = await ethers.getSigners();
  console.log("D√©ploiement avec le compte:", deployer.address);

  // √âtape 1: D√©ployer le pool de swap CVTC
  console.log("\nüì¶ √âtape 1: D√©ploiement du pool de swap CVTC");
  const CVTCSwap = await ethers.getContractFactory("CVTCSwap");
  const cvtcSwap = await CVTCSwap.deploy(CVTC_TOKEN_ADDRESS);

  await cvtcSwap.waitForDeployment();
  const swapAddress = await cvtcSwap.getAddress();

  console.log("‚úÖ Pool de swap d√©ploy√©:", swapAddress);

  // √âtape 2: Approuver le transfert de CVTC pour la liquidit√©
  console.log("\nüîë √âtape 2: Approbation du transfert CVTC");
  const cvtcToken = await ethers.getContractAt("IERC20", CVTC_TOKEN_ADDRESS);

  // V√©rifier le solde CVTC du d√©ployeur
  const cvtcBalance = await cvtcToken.balanceOf(deployer.address);
  console.log("Solde CVTC du d√©ployeur:", ethers.formatEther(cvtcBalance));

  if (cvtcBalance < INITIAL_LIQUIDITY_CVTC) {
    console.log("‚ö†Ô∏è Solde CVTC insuffisant. Veuillez obtenir des CVTC avant de continuer.");
    console.log("CVTC n√©cessaires:", ethers.formatEther(INITIAL_LIQUIDITY_CVTC));
    return;
  }

  // Approuver le transfert
  const approveTx = await cvtcToken.approve(swapAddress, INITIAL_LIQUIDITY_CVTC);
  await approveTx.wait();
  console.log("‚úÖ Approbation CVTC accord√©e");

  // √âtape 3: Ajouter la liquidit√© initiale
  console.log("\nüíß √âtape 3: Ajout de la liquidit√© initiale");
  console.log("Ajout de", ethers.formatEther(INITIAL_LIQUIDITY_BNB), "BNB");
  console.log("Ajout de", ethers.formatEther(INITIAL_LIQUIDITY_CVTC), "CVTC");

  const addLiquidityTx = await cvtcSwap.addLiquidity(INITIAL_LIQUIDITY_CVTC, {
    value: INITIAL_LIQUIDITY_BNB
  });
  await addLiquidityTx.wait();
  console.log("‚úÖ Liquidit√© ajout√©e avec succ√®s");

  // √âtape 4: V√©rifier les r√©serves
  console.log("\nüìä √âtape 4: V√©rification des r√©serves");
  const reserves = await cvtcSwap.getReserves();
  console.log("R√©serves BNB:", ethers.formatEther(reserves[0]));
  console.log("R√©serves CVTC:", ethers.formatEther(reserves[1]));

  // √âtape 5: Configurer les autorisations pour l'onboarding
  console.log("\n‚öôÔ∏è √âtape 5: Configuration des autorisations");

  // Ajouter le d√©ployeur comme owner bot (pour les tests)
  await cvtcSwap.updateOwnerBot(deployer.address, true);
  console.log("‚úÖ D√©ployeur ajout√© comme owner bot");

  // √âtape 6: Sauvegarder la configuration
  console.log("\nüíæ √âtape 6: Sauvegarde de la configuration");
  const config = {
    cvtcToken: CVTC_TOKEN_ADDRESS,
    cvtcSwap: swapAddress,
    initialLiquidityBNB: INITIAL_LIQUIDITY_BNB.toString(),
    initialLiquidityCVTC: INITIAL_LIQUIDITY_CVTC.toString(),
    deployedAt: new Date().toISOString(),
    network: "bsc-testnet"
  };

  const fs = require("fs");
  fs.writeFileSync("./deployments/swap-pool-config.json", JSON.stringify(config, null, 2));
  console.log("üìÑ Configuration sauvegard√©e dans ./deployments/swap-pool-config.json");

  // √âtape 7: R√©sum√© final
  console.log("\nüéâ Configuration termin√©e avec succ√®s!");
  console.log("=== R√âSUM√â ===");
  console.log("Token CVTC:", CVTC_TOKEN_ADDRESS);
  console.log("Pool de Swap:", swapAddress);
  console.log("Liquidit√© BNB:", ethers.formatEther(INITIAL_LIQUIDITY_BNB));
  console.log("Liquidit√© CVTC:", ethers.formatEther(INITIAL_LIQUIDITY_CVTC));
  console.log("Prix initial approximatif: 1 CVTC ‚âà", Number(INITIAL_LIQUIDITY_BNB) / Number(INITIAL_LIQUIDITY_CVTC), "BNB");

  console.log("\nüìã Prochaines √©tapes:");
  console.log("1. D√©ployer le contrat CVTCOnboarding avec l'adresse du pool");
  console.log("2. Tester l'int√©gration compl√®te");
  console.log("3. Configurer l'automatisation des swaps quotidiens");
}

// Gestion des erreurs
main().catch((error) => {
  console.error("‚ùå Erreur lors de la configuration:", error);
  process.exitCode = 1;
});