import { ethers } from "hardhat";

async function main() {
  console.log("üîÑ MISE √Ä JOUR ET INITIALISATION DU POOL CVTC SWAP");
  console.log("=================================================");

  // Ancienne adresse du swap
  const OLD_SWAP_ADDRESS = "0x9fD15619a90005468F02920Bb569c95759Da710C";
  const CVTC_TOKEN_ADDRESS = "0x532FC49071656C16311F2f89E6e41C53243355D3";

  console.log(`üìç Ancien Swap: ${OLD_SWAP_ADDRESS}`);
  console.log(`ü™ô Token CVTC: ${CVTC_TOKEN_ADDRESS}`);

  // Obtenir le signer (deployer)
  const [deployer] = await ethers.getSigners();
  console.log(`üë§ Deployer: ${deployer.address}`);

  // V√©rifier le solde BNB
  const bnbBalance = await ethers.provider.getBalance(deployer.address);
  console.log(`üí∞ Solde BNB: ${ethers.formatEther(bnbBalance)} BNB`);

  // PHASE 1: V√©rifier l'√©tat actuel
  console.log("\\nüîç PHASE 1: ANALYSE DE L'√âTAT ACTUEL");

  const oldSwapContract = await ethers.getContractAt("CVTCSwap", OLD_SWAP_ADDRESS);
  const cvtcToken = await ethers.getContractAt("CVTCLPToken", CVTC_TOKEN_ADDRESS);

  const oldCvtcBalance = await cvtcToken.balanceOf(OLD_SWAP_ADDRESS);
  const [oldBnbReserve, oldCvtcReserve] = await oldSwapContract.getReserves();

  console.log(`üè¶ CVTC dans ancien swap: ${ethers.formatUnits(oldCvtcBalance, 2)} CVTC`);
  console.log(`üìä R√©serves actuelles - BNB: ${ethers.formatEther(oldBnbReserve)}, CVTC: ${ethers.formatUnits(oldCvtcReserve, 2)}`);

  // PHASE 2: D√©ployer le nouveau contrat
  console.log("\\nüî® PHASE 2: D√âPLOIEMENT DU NOUVEAU CONTRAT");

  const CVTCSwap = await ethers.getContractFactory("CVTCSwap");
  const newSwapContract = await CVTCSwap.deploy(CVTC_TOKEN_ADDRESS);
  await newSwapContract.waitForDeployment();
  const NEW_SWAP_ADDRESS = await newSwapContract.getAddress();

  console.log(`‚úÖ Nouveau swap d√©ploy√©: ${NEW_SWAP_ADDRESS}`);

  // PHASE 3: Transf√©rer les tokens vers le nouveau contrat
  console.log("\\nüîÑ PHASE 3: TRANSFERT DES TOKENS");

  if (oldCvtcBalance > 0) {
    console.log("üí∏ Transfert des tokens CVTC vers le nouveau contrat...");

    // Puisque les tokens sont d√©j√† dans l'ancien contrat, nous devons les "r√©cup√©rer"
    // Cette √©tape peut n√©cessiter une modification manuelle ou une fonction sp√©ciale

    console.log("‚ö†Ô∏è Les tokens sont bloqu√©s dans l'ancien contrat");
    console.log("üéØ Solution: Mint de nouveaux tokens pour le nouveau contrat");

    // Mint de nouveaux tokens pour le nouveau contrat
    const mintAmount = ethers.parseUnits("100000000", 2); // 100 millions pour commencer
    const mintTx = await cvtcToken.mint(NEW_SWAP_ADDRESS, mintAmount);
    await mintTx.wait();

    console.log(`‚úÖ ${ethers.formatUnits(mintAmount, 2)} CVTC mint√©s dans le nouveau contrat`);
  }

  // PHASE 4: Initialiser la liquidit√©
  console.log("\\nüíß PHASE 4: INITIALISATION DE LA LIQUIDIT√â");

  const BNB_TO_ADD = ethers.parseEther("0.1"); // 0.1 BNB
  const newCvtcBalance = await cvtcToken.balanceOf(NEW_SWAP_ADDRESS);

  console.log(`üí∞ BNB √† ajouter: ${ethers.formatEther(BNB_TO_ADD)} BNB`);
  console.log(`ü™ô CVTC disponible: ${ethers.formatUnits(newCvtcBalance, 2)} CVTC`);

  // V√©rifier que nous avons assez de BNB
  if (bnbBalance < BNB_TO_ADD) {
    throw new Error(`Solde BNB insuffisant: ${ethers.formatEther(bnbBalance)} < ${ethers.formatEther(BNB_TO_ADD)}`);
  }

  // Initialiser avec les tokens existants
  console.log("üåä Initialisation de la liquidit√©...");
  const initTx = await newSwapContract.initializeWithExistingTokens(BNB_TO_ADD, {
    value: BNB_TO_ADD
  });
  await initTx.wait();

  console.log("‚úÖ Liquidit√© initialis√©e !");
  console.log(`üìã Transaction: ${initTx.hash}`);

  // PHASE 5: V√©rification finale
  console.log("\\nüìä PHASE 5: V√âRIFICATION FINALE");

  const [finalBnbReserve, finalCvtcReserve] = await newSwapContract.getReserves();
  console.log(`üí∞ R√©serves BNB: ${ethers.formatEther(finalBnbReserve)} BNB`);
  console.log(`ü™ô R√©serves CVTC: ${ethers.formatUnits(finalCvtcReserve, 2)} CVTC`);

  if (finalBnbReserve > 0 && finalCvtcReserve > 0) {
    const ratio = parseFloat(ethers.formatEther(finalBnbReserve)) / parseFloat(ethers.formatUnits(finalCvtcReserve, 2));
    console.log(`üìà Ratio BNB/CVTC: ${ratio.toFixed(10)}`);

    console.log("\\nüéâ SUCC√àS ! NOUVEAU POOL OP√âRATIONNEL");
    console.log("==================================");
    console.log(`üìç Nouveau Swap Address: ${NEW_SWAP_ADDRESS}`);
    console.log("‚úÖ Liquidit√© active");
    console.log("üöÄ Pr√™t pour les swaps !");
  }

  // R√âSUM√â
  console.log("\\nüìã R√âSUM√â DE LA MIGRATION:");
  console.log(`üìç Ancien contrat: ${OLD_SWAP_ADDRESS}`);
  console.log(`üìç Nouveau contrat: ${NEW_SWAP_ADDRESS}`);
  console.log(`ü™ô Tokens migr√©s: ${ethers.formatUnits(newCvtcBalance, 2)} CVTC`);
  console.log(`üí∞ Liquidit√© ajout√©e: ${ethers.formatEther(BNB_TO_ADD)} BNB`);
}

// Gestion des erreurs
main().catch((error) => {
  console.error("‚ùå Erreur lors de la mise √† jour:", error);
  process.exitCode = 1;
});