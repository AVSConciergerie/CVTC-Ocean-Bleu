import { ethers } from "hardhat";

async function main() {
  console.log("üß™ TEST DU CVTC CONTRACT CONNECTOR");
  console.log("==================================");

  // Adresse du connector (√† remplacer apr√®s d√©ploiement)
  const CONNECTOR_ADDRESS = "0x..."; // Remplacer par l'adresse r√©elle

  if (CONNECTOR_ADDRESS === "0x...") {
    console.log("‚ùå Veuillez remplacer CONNECTOR_ADDRESS par l'adresse r√©elle du connector d√©ploy√©");
    return;
  }

  // Se connecter au connector
  const connector = await ethers.getContractAt("CVTCContractConnector", CONNECTOR_ADDRESS);

  console.log(`üîó Connector: ${CONNECTOR_ADDRESS}`);

  // Test 1: V√©rifier l'owner
  const owner = await connector.owner();
  console.log(`üëë Owner: ${owner}`);

  // Test 2: Lister les types support√©s
  const supportedTypes = await connector.getSupportedTypes();
  console.log(`üìã Types support√©s: ${supportedTypes.length}`);
  supportedTypes.forEach((type, index) => {
    console.log(`  ${index + 1}. ${type}`);
  });

  // Test 3: V√©rifier les connexions actuelles
  console.log(`\nüîç CONNEXIONS ACTUELLES:`);
  const [types, addresses, enabled] = await connector.getAllConnectedContracts();

  let connectedCount = 0;
  for (let i = 0; i < types.length; i++) {
    if (addresses[i] !== ethers.ZeroAddress) {
      console.log(`‚úÖ ${types[i]}: ${addresses[i]} (${enabled[i] ? 'Actif' : 'Inactif'})`);
      connectedCount++;
    }
  }

  if (connectedCount === 0) {
    console.log(`‚ùå Aucun contrat connect√©`);
  }

  // Test 4: Tester les fonctions de lecture
  console.log(`\nüß™ TESTS DES FONCTIONS:`);

  // Tester isContractActive
  const isSwapActive = await connector.isContractActive("swap");
  console.log(`üè¶ Swap actif: ${isSwapActive}`);

  // Tester getContractAddress
  const swapAddress = await connector.getContractAddress("swap");
  console.log(`üè¶ Adresse swap: ${swapAddress}`);

  // Test 5: V√©rifier les tokens autoris√©s
  const cvtcToken = "0x532FC49071656C16311F2f89E6e41C53243355D3";
  const isCvtcAuthorized = await connector.authorizedTokens(cvtcToken);
  console.log(`üí∞ CVTC autoris√©: ${isCvtcAuthorized}`);

  console.log(`\nüéâ TESTS TERMIN√âS !`);

  if (connectedCount > 0) {
    console.log(`‚úÖ Connector op√©rationnel avec ${connectedCount} contrat(s) connect√©(s)`);
  } else {
    console.log(`‚ö†Ô∏è Connector d√©ploy√© mais aucun contrat connect√©`);
    console.log(`üí° Utilisez setup-connector.ts pour connecter les contrats existants`);
  }
}

main().catch((error) => {
  console.error("‚ùå Erreur:", error);
  process.exitCode = 1;
});