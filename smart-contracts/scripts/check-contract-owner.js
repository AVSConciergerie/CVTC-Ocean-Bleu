const { ethers } = require("ethers");

async function main() {
  console.log("üîç V√âRIFICATION DU PROPRI√âTAIRE DU CONTRAT");
  console.log("=========================================");

  const contractAddress = "0xe094f17A086CfC7f4A1F95817aa836d40b6B0a83";
  const cvtcTokenAddress = "0x532FC49071656C16311F2f89E6e41C53243355D3";
  const userAddress = "0x1EdB8DD2C5d6c25B7661316ae57C3E95E0cF6389";

  // ABI pour v√©rifier le propri√©taire
  const ownerABI = [
    "function owner() view returns (address)",
    "function balanceOf(address) view returns (uint256)",
    "function transfer(address to, uint256 amount) returns (bool)",
    "function getUserStaggeredTransfers(address) view returns (uint256[])",
    "function getStaggeredTransferInfo(uint256) view returns (tuple(address, address, uint256, uint256, uint256, uint256, uint256[], bool))",
    "function canExecuteRelease(uint256, address) view returns (bool)"
  ];

  const provider = new ethers.JsonRpcProvider("https://data-seed-prebsc-1-s1.binance.org:8545/");

  try {
    const contract = new ethers.Contract(contractAddress, ownerABI, provider);

    // V√©rifier le propri√©taire
    let owner;
    try {
      owner = await contract.owner();
      console.log(`üëë Propri√©taire du contrat: ${owner}`);
    } catch (error) {
      console.log("‚ÑπÔ∏è Le contrat n'a pas de fonction owner() - ce n'est pas un Ownable standard");
    }

    // V√©rifier le solde du contrat dans le token CVTC
    const tokenContract = new ethers.Contract(cvtcTokenAddress, ["function balanceOf(address) view returns (uint256)"], provider);
    const contractBalance = await tokenContract.balanceOf(contractAddress);
    console.log(`üè¶ Solde du contrat dans CVTC: ${ethers.formatUnits(contractBalance, 2)} CVTC`);

    // V√©rifier si le contrat lui-m√™me a des tokens
    try {
      const selfBalance = await contract.balanceOf(contractAddress);
      console.log(`üè† Solde interne du contrat: ${ethers.formatUnits(selfBalance, 2)} tokens`);
    } catch (error) {
      console.log("‚ÑπÔ∏è Le contrat n'a pas de fonction balanceOf interne");
    }

    // V√©rifier les transferts √©chelonn√©s de l'utilisateur
    try {
      const userStaggeredTransfers = await contract.getUserStaggeredTransfers(userAddress);
      console.log(`üîÑ Transferts √©chelonn√©s de l'utilisateur: ${userStaggeredTransfers.length}`);
      for (let i = 0; i < userStaggeredTransfers.length; i++) {
        const transferId = userStaggeredTransfers[i];
        const transferInfo = await contract.getStaggeredTransferInfo(transferId);
        console.log(`  - Transfert ${transferId}: ${ethers.formatUnits(transferInfo.totalAmount, 2)} CVTC, restant: ${ethers.formatUnits(transferInfo.remainingAmount, 2)}, actif: ${transferInfo.isActive}`);
        if (transferInfo.isActive && transferInfo.currentStep < transferInfo.releaseSchedule.length) {
          const canExecute = await contract.canExecuteRelease(transferId, userAddress);
          console.log(`    Peut ex√©cuter: ${canExecute}`);
        }
      }
    } catch (error) {
      console.log("‚ÑπÔ∏è Impossible de v√©rifier les transferts √©chelonn√©s:", error.message);
    }

    console.log("\nüìã R√âSUM√â:");
    console.log(`- Contrat: ${contractAddress}`);
    console.log(`- Tokens CVTC d√©tenus: ${ethers.formatUnits(contractBalance, 2)}`);
    console.log(`- Tu es le propri√©taire: ${owner?.toLowerCase() === userAddress.toLowerCase() ? 'OUI' : 'NON'}`);

    if (contractBalance > 0) {
      console.log("\nüéØ PROCHAINES √âTAPES POSSIBLES:");
      if (owner?.toLowerCase() === userAddress.toLowerCase()) {
        console.log("1. ‚úÖ Tu es propri√©taire - tu peux appeler les fonctions owner-only");
        console.log("2. üîç Cherche les fonctions 'emergencyCVTCReturn' ou 'recoverLostTokens'");
      } else {
        console.log("1. ‚ùå Tu n'es pas propri√©taire du contrat");
        console.log("2. üîç Le propri√©taire doit appeler les fonctions de transfert");
        console.log("3. üí° Ou cr√©er un nouveau contrat pour r√©cup√©rer les tokens");
      }
    }

  } catch (error) {
    console.error("‚ùå Erreur:", error.message);
  }
}

main().catch((error) => {
  console.error("‚ùå Erreur g√©n√©rale:", error);
  process.exitCode = 1;
});